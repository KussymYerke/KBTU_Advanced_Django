[
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "NewType",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "punq",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "punq",
        "description": "punq",
        "detail": "punq",
        "documentation": {}
    },
    {
        "label": "dramatiq",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "dramatiq",
        "description": "dramatiq",
        "detail": "dramatiq",
        "documentation": {}
    },
    {
        "label": "RedisBackend",
        "importPath": "dramatiq.results.backends.redis",
        "description": "dramatiq.results.backends.redis",
        "isExtraImport": true,
        "detail": "dramatiq.results.backends.redis",
        "documentation": {}
    },
    {
        "label": "RedisBroker",
        "importPath": "dramatiq.brokers.redis",
        "description": "dramatiq.brokers.redis",
        "isExtraImport": true,
        "detail": "dramatiq.brokers.redis",
        "documentation": {}
    },
    {
        "label": "Results",
        "importPath": "dramatiq.results",
        "description": "dramatiq.results",
        "isExtraImport": true,
        "detail": "dramatiq.results",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "ReadTimeout",
        "importPath": "requests.exceptions",
        "description": "requests.exceptions",
        "isExtraImport": true,
        "detail": "requests.exceptions",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "ResultMissing",
        "importPath": "dramatiq.results.errors",
        "description": "dramatiq.results.errors",
        "isExtraImport": true,
        "detail": "dramatiq.results.errors",
        "documentation": {}
    },
    {
        "label": "factorial",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "send_request_to_our_server",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "result_backend",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "factorial",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "confluent_kafka",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "confluent_kafka",
        "description": "confluent_kafka",
        "detail": "confluent_kafka",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "index",
        "importPath": "app.views",
        "description": "app.views",
        "isExtraImport": true,
        "detail": "app.views",
        "documentation": {}
    },
    {
        "label": "add_student",
        "importPath": "app.views",
        "description": "app.views",
        "isExtraImport": true,
        "detail": "app.views",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "Student",
        "importPath": "app.forms",
        "description": "app.forms",
        "isExtraImport": true,
        "detail": "app.forms",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "context",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "context",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "context",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "context",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "sqlalchemy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "engine_from_config",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "pool",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "engine_from_config",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "pool",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "engine_from_config",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "pool",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "engine_from_config",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "pool",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "fileConfig",
        "importPath": "logging.config",
        "description": "logging.config",
        "isExtraImport": true,
        "detail": "logging.config",
        "documentation": {}
    },
    {
        "label": "fileConfig",
        "importPath": "logging.config",
        "description": "logging.config",
        "isExtraImport": true,
        "detail": "logging.config",
        "documentation": {}
    },
    {
        "label": "fileConfig",
        "importPath": "logging.config",
        "description": "logging.config",
        "isExtraImport": true,
        "detail": "logging.config",
        "documentation": {}
    },
    {
        "label": "fileConfig",
        "importPath": "logging.config",
        "description": "logging.config",
        "isExtraImport": true,
        "detail": "logging.config",
        "documentation": {}
    },
    {
        "label": "database",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "database",
        "description": "database",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "url",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "url",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "url",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "url",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "models",
        "description": "models",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Worker",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "CreateWorker",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "Company",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "CreateCompany",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "CreateJob",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "Job",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "ReturnType",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "Worker",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "Job",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "Company",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "ReturnType",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "Worker",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "CreateWorker",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "Company",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "CreateCompany",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "CreateJob",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "Job",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "ReturnType",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "Worker",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "Job",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "Company",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "ReturnType",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "Worker",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "CreateWorker",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "Company",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "CreateCompany",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "CreateJob",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "Job",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "ReturnType",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "Worker",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "Job",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "Company",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "ReturnType",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "WorkerRepository",
        "importPath": "repository",
        "description": "repository",
        "isExtraImport": true,
        "detail": "repository",
        "documentation": {}
    },
    {
        "label": "AbcRepository",
        "importPath": "repository",
        "description": "repository",
        "isExtraImport": true,
        "detail": "repository",
        "documentation": {}
    },
    {
        "label": "CompanyRepository",
        "importPath": "repository",
        "description": "repository",
        "isExtraImport": true,
        "detail": "repository",
        "documentation": {}
    },
    {
        "label": "WorkerRepository",
        "importPath": "repository",
        "description": "repository",
        "isExtraImport": true,
        "detail": "repository",
        "documentation": {}
    },
    {
        "label": "AbcRepository",
        "importPath": "repository",
        "description": "repository",
        "isExtraImport": true,
        "detail": "repository",
        "documentation": {}
    },
    {
        "label": "CompanyRepository",
        "importPath": "repository",
        "description": "repository",
        "isExtraImport": true,
        "detail": "repository",
        "documentation": {}
    },
    {
        "label": "WorkerRepository",
        "importPath": "repository",
        "description": "repository",
        "isExtraImport": true,
        "detail": "repository",
        "documentation": {}
    },
    {
        "label": "AbcRepository",
        "importPath": "repository",
        "description": "repository",
        "isExtraImport": true,
        "detail": "repository",
        "documentation": {}
    },
    {
        "label": "CompanyRepository",
        "importPath": "repository",
        "description": "repository",
        "isExtraImport": true,
        "detail": "repository",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "Author",
        "kind": 6,
        "importPath": "assigment.main",
        "description": "assigment.main",
        "peekOfCode": "class Author(BaseModel):\n    name: str\n    books: List[int] = []\nclass Publisher(BaseModel):\n    name: str\n    books: List[int] = []\nclass Book(BaseModel):\n    id: int\n    title: str\n    author_id: int",
        "detail": "assigment.main",
        "documentation": {}
    },
    {
        "label": "Publisher",
        "kind": 6,
        "importPath": "assigment.main",
        "description": "assigment.main",
        "peekOfCode": "class Publisher(BaseModel):\n    name: str\n    books: List[int] = []\nclass Book(BaseModel):\n    id: int\n    title: str\n    author_id: int\n    publisher_id: int\nclass BookRepository:\n    def __init__(self):",
        "detail": "assigment.main",
        "documentation": {}
    },
    {
        "label": "Book",
        "kind": 6,
        "importPath": "assigment.main",
        "description": "assigment.main",
        "peekOfCode": "class Book(BaseModel):\n    id: int\n    title: str\n    author_id: int\n    publisher_id: int\nclass BookRepository:\n    def __init__(self):\n        self.counter = 0\n    def add_book(self, book: Book):\n        self.counter += 1",
        "detail": "assigment.main",
        "documentation": {}
    },
    {
        "label": "BookRepository",
        "kind": 6,
        "importPath": "assigment.main",
        "description": "assigment.main",
        "peekOfCode": "class BookRepository:\n    def __init__(self):\n        self.counter = 0\n    def add_book(self, book: Book):\n        self.counter += 1\n        book.id = self.counter\n        books.append(book)\n        return book\n    def get_book_by_id(self, book_id: int):\n        for book in books:",
        "detail": "assigment.main",
        "documentation": {}
    },
    {
        "label": "AuthorRepository",
        "kind": 6,
        "importPath": "assigment.main",
        "description": "assigment.main",
        "peekOfCode": "class AuthorRepository:\n    def add_author(self, author: Author):\n        authors.append(author)\n        return author\nclass PublisherRepository:\n    def add_publisher(self, publisher: Publisher):\n        publishers.append(publisher)\n        return publisher\ndef get_container() -> punq.Container:\n    container = punq.Container()",
        "detail": "assigment.main",
        "documentation": {}
    },
    {
        "label": "PublisherRepository",
        "kind": 6,
        "importPath": "assigment.main",
        "description": "assigment.main",
        "peekOfCode": "class PublisherRepository:\n    def add_publisher(self, publisher: Publisher):\n        publishers.append(publisher)\n        return publisher\ndef get_container() -> punq.Container:\n    container = punq.Container()\n    container.register(BookRepository)\n    container.register(AuthorRepository)\n    container.register(PublisherRepository)\n    return container",
        "detail": "assigment.main",
        "documentation": {}
    },
    {
        "label": "get_container",
        "kind": 2,
        "importPath": "assigment.main",
        "description": "assigment.main",
        "peekOfCode": "def get_container() -> punq.Container:\n    container = punq.Container()\n    container.register(BookRepository)\n    container.register(AuthorRepository)\n    container.register(PublisherRepository)\n    return container\n@app.post(\"/books/\", response_model=Book)\ndef create_book(book_repo: BookRepository = Depends(get_container().resolve(BookRepository).add_book)):\n    return book_repo\n@app.get(\"/books/{book_id}\", response_model=Book)",
        "detail": "assigment.main",
        "documentation": {}
    },
    {
        "label": "create_book",
        "kind": 2,
        "importPath": "assigment.main",
        "description": "assigment.main",
        "peekOfCode": "def create_book(book_repo: BookRepository = Depends(get_container().resolve(BookRepository).add_book)):\n    return book_repo\n@app.get(\"/books/{book_id}\", response_model=Book)\ndef read_book(book_id: int, book_repo: BookRepository = Depends(get_container().resolve(BookRepository).get_book_by_id)):\n    book = book_repo.get_book_by_id(book_id)\n    return book\n@app.delete(\"/books/{book_id}\", response_model=Book)\ndef delete_book(book_id: int, book_repo: BookRepository = Depends(get_container().resolve)):\n    deleted_book = book_repo.delete_book(book_id)\n    return deleted_book",
        "detail": "assigment.main",
        "documentation": {}
    },
    {
        "label": "read_book",
        "kind": 2,
        "importPath": "assigment.main",
        "description": "assigment.main",
        "peekOfCode": "def read_book(book_id: int, book_repo: BookRepository = Depends(get_container().resolve(BookRepository).get_book_by_id)):\n    book = book_repo.get_book_by_id(book_id)\n    return book\n@app.delete(\"/books/{book_id}\", response_model=Book)\ndef delete_book(book_id: int, book_repo: BookRepository = Depends(get_container().resolve)):\n    deleted_book = book_repo.delete_book(book_id)\n    return deleted_book\n@app.post(\"/authors/\", response_model=Author)\ndef create_author(author: Author, author_repo: AuthorRepository = Depends(get_container().resolve)):\n    return author_repo.add_author(author)",
        "detail": "assigment.main",
        "documentation": {}
    },
    {
        "label": "delete_book",
        "kind": 2,
        "importPath": "assigment.main",
        "description": "assigment.main",
        "peekOfCode": "def delete_book(book_id: int, book_repo: BookRepository = Depends(get_container().resolve)):\n    deleted_book = book_repo.delete_book(book_id)\n    return deleted_book\n@app.post(\"/authors/\", response_model=Author)\ndef create_author(author: Author, author_repo: AuthorRepository = Depends(get_container().resolve)):\n    return author_repo.add_author(author)\n@app.post(\"/publishers/\", response_model=Publisher)\ndef create_publisher(publisher: Publisher, publisher_repo: PublisherRepository = Depends(get_container().resolve)):\n    return publisher_repo.add_publisher(publisher)",
        "detail": "assigment.main",
        "documentation": {}
    },
    {
        "label": "create_author",
        "kind": 2,
        "importPath": "assigment.main",
        "description": "assigment.main",
        "peekOfCode": "def create_author(author: Author, author_repo: AuthorRepository = Depends(get_container().resolve)):\n    return author_repo.add_author(author)\n@app.post(\"/publishers/\", response_model=Publisher)\ndef create_publisher(publisher: Publisher, publisher_repo: PublisherRepository = Depends(get_container().resolve)):\n    return publisher_repo.add_publisher(publisher)",
        "detail": "assigment.main",
        "documentation": {}
    },
    {
        "label": "create_publisher",
        "kind": 2,
        "importPath": "assigment.main",
        "description": "assigment.main",
        "peekOfCode": "def create_publisher(publisher: Publisher, publisher_repo: PublisherRepository = Depends(get_container().resolve)):\n    return publisher_repo.add_publisher(publisher)",
        "detail": "assigment.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "assigment.main",
        "description": "assigment.main",
        "peekOfCode": "app = FastAPI()\nbooks = []\nauthors = []\npublishers = []\nclass Author(BaseModel):\n    name: str\n    books: List[int] = []\nclass Publisher(BaseModel):\n    name: str\n    books: List[int] = []",
        "detail": "assigment.main",
        "documentation": {}
    },
    {
        "label": "books",
        "kind": 5,
        "importPath": "assigment.main",
        "description": "assigment.main",
        "peekOfCode": "books = []\nauthors = []\npublishers = []\nclass Author(BaseModel):\n    name: str\n    books: List[int] = []\nclass Publisher(BaseModel):\n    name: str\n    books: List[int] = []\nclass Book(BaseModel):",
        "detail": "assigment.main",
        "documentation": {}
    },
    {
        "label": "authors",
        "kind": 5,
        "importPath": "assigment.main",
        "description": "assigment.main",
        "peekOfCode": "authors = []\npublishers = []\nclass Author(BaseModel):\n    name: str\n    books: List[int] = []\nclass Publisher(BaseModel):\n    name: str\n    books: List[int] = []\nclass Book(BaseModel):\n    id: int",
        "detail": "assigment.main",
        "documentation": {}
    },
    {
        "label": "publishers",
        "kind": 5,
        "importPath": "assigment.main",
        "description": "assigment.main",
        "peekOfCode": "publishers = []\nclass Author(BaseModel):\n    name: str\n    books: List[int] = []\nclass Publisher(BaseModel):\n    name: str\n    books: List[int] = []\nclass Book(BaseModel):\n    id: int\n    title: str",
        "detail": "assigment.main",
        "documentation": {}
    },
    {
        "label": "factorial",
        "kind": 2,
        "importPath": "dramtest.main",
        "description": "dramtest.main",
        "peekOfCode": "def factorial(n: int):\n    fact = 1\n    for i in range(2, n + 1):\n        fact *= i\n    return fact\ndef when_to_retry(number_of_retries: int, exc: Exception) -> bool:\n    return isinstance(exc, ReadTimeout)\nchecks = [\n    'drug',\n    'psycho',",
        "detail": "dramtest.main",
        "documentation": {}
    },
    {
        "label": "when_to_retry",
        "kind": 2,
        "importPath": "dramtest.main",
        "description": "dramtest.main",
        "peekOfCode": "def when_to_retry(number_of_retries: int, exc: Exception) -> bool:\n    return isinstance(exc, ReadTimeout)\nchecks = [\n    'drug',\n    'psycho',\n    'crime',\n]\n@dramatiq.actor(store_results=True)\ndef send_request_to_our_server(name: str) -> str:\n    print(\"ok\")",
        "detail": "dramtest.main",
        "documentation": {}
    },
    {
        "label": "send_request_to_our_server",
        "kind": 2,
        "importPath": "dramtest.main",
        "description": "dramtest.main",
        "peekOfCode": "def send_request_to_our_server(name: str) -> str:\n    print(\"ok\")\n    for check in checks:\n        response = requests.get(f\"http://127.0.0.1:8000/{check}/?name={name}\")\n        is_ok = not response.json()\n        if not is_ok:\n            return \"dangerous\"\n    return \"ok\"\n# docker run -d --name redis -p 6379:6379 redis/redis-stack-server:latest",
        "detail": "dramtest.main",
        "documentation": {}
    },
    {
        "label": "result_backend",
        "kind": 5,
        "importPath": "dramtest.main",
        "description": "dramtest.main",
        "peekOfCode": "result_backend = RedisBackend()\nbroker = RedisBroker()\nbroker.add_middleware(Results(backend=result_backend))\ndramatiq.set_broker(broker)\n@dramatiq.actor(store_results=True)\ndef factorial(n: int):\n    fact = 1\n    for i in range(2, n + 1):\n        fact *= i\n    return fact",
        "detail": "dramtest.main",
        "documentation": {}
    },
    {
        "label": "broker",
        "kind": 5,
        "importPath": "dramtest.main",
        "description": "dramtest.main",
        "peekOfCode": "broker = RedisBroker()\nbroker.add_middleware(Results(backend=result_backend))\ndramatiq.set_broker(broker)\n@dramatiq.actor(store_results=True)\ndef factorial(n: int):\n    fact = 1\n    for i in range(2, n + 1):\n        fact *= i\n    return fact\ndef when_to_retry(number_of_retries: int, exc: Exception) -> bool:",
        "detail": "dramtest.main",
        "documentation": {}
    },
    {
        "label": "checks",
        "kind": 5,
        "importPath": "dramtest.main",
        "description": "dramtest.main",
        "peekOfCode": "checks = [\n    'drug',\n    'psycho',\n    'crime',\n]\n@dramatiq.actor(store_results=True)\ndef send_request_to_our_server(name: str) -> str:\n    print(\"ok\")\n    for check in checks:\n        response = requests.get(f\"http://127.0.0.1:8000/{check}/?name={name}\")",
        "detail": "dramtest.main",
        "documentation": {}
    },
    {
        "label": "Employee",
        "kind": 6,
        "importPath": "dramtest.test_logic",
        "description": "dramtest.test_logic",
        "peekOfCode": "class Employee(BaseModel):\n    name: str\n    age: int\n@app.post(\"/add_employee\")\ndef add_employee(employee: Employee):\n    task = send_request_to_our_server.send(employee.name)\n    return {'id': task.message_id}\n@app.get(\"/result\")\ndef result(id: str):\n    try:",
        "detail": "dramtest.test_logic",
        "documentation": {}
    },
    {
        "label": "add_employee",
        "kind": 2,
        "importPath": "dramtest.test_logic",
        "description": "dramtest.test_logic",
        "peekOfCode": "def add_employee(employee: Employee):\n    task = send_request_to_our_server.send(employee.name)\n    return {'id': task.message_id}\n@app.get(\"/result\")\ndef result(id: str):\n    try:\n        task = send_request_to_our_server.message().copy(message_id=id)\n        return result_backend.get_result(task)\n    except ResultMissing:\n        return \"Waiting for all requests\"",
        "detail": "dramtest.test_logic",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 2,
        "importPath": "dramtest.test_logic",
        "description": "dramtest.test_logic",
        "peekOfCode": "def result(id: str):\n    try:\n        task = send_request_to_our_server.message().copy(message_id=id)\n        return result_backend.get_result(task)\n    except ResultMissing:\n        return \"Waiting for all requests\"",
        "detail": "dramtest.test_logic",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "dramtest.test_logic",
        "description": "dramtest.test_logic",
        "peekOfCode": "app = FastAPI()\nclass Employee(BaseModel):\n    name: str\n    age: int\n@app.post(\"/add_employee\")\ndef add_employee(employee: Employee):\n    task = send_request_to_our_server.send(employee.name)\n    return {'id': task.message_id}\n@app.get(\"/result\")\ndef result(id: str):",
        "detail": "dramtest.test_logic",
        "documentation": {}
    },
    {
        "label": "produce",
        "kind": 2,
        "importPath": "kafka.core.producer",
        "description": "kafka.core.producer",
        "peekOfCode": "def produce(message: Message ) -> None:\n    producer.produce(topic=topic, value=message)\n    producer.flush()\n    print(f\"Produces {topic}\")\nif __name__ == '__main__':\n    message = Message('Hello!')\n    produce(message)",
        "detail": "kafka.core.producer",
        "documentation": {}
    },
    {
        "label": "producer",
        "kind": 5,
        "importPath": "kafka.core.producer",
        "description": "kafka.core.producer",
        "peekOfCode": "producer = confluent_kafka.Producer(\n    {\"bootstrap.servers\": \"localhost:9092\"}\n)\ntopic = \"main_topic\"\ndef produce(message: Message ) -> None:\n    producer.produce(topic=topic, value=message)\n    producer.flush()\n    print(f\"Produces {topic}\")\nif __name__ == '__main__':\n    message = Message('Hello!')",
        "detail": "kafka.core.producer",
        "documentation": {}
    },
    {
        "label": "topic",
        "kind": 5,
        "importPath": "kafka.core.producer",
        "description": "kafka.core.producer",
        "peekOfCode": "topic = \"main_topic\"\ndef produce(message: Message ) -> None:\n    producer.produce(topic=topic, value=message)\n    producer.flush()\n    print(f\"Produces {topic}\")\nif __name__ == '__main__':\n    message = Message('Hello!')\n    produce(message)",
        "detail": "kafka.core.producer",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "kind": 6,
        "importPath": "lection_1.kbtu_django_advanced_1.app.apps",
        "description": "lection_1.kbtu_django_advanced_1.app.apps",
        "peekOfCode": "class AppConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"app\"",
        "detail": "lection_1.kbtu_django_advanced_1.app.apps",
        "documentation": {}
    },
    {
        "label": "Student",
        "kind": 6,
        "importPath": "lection_1.kbtu_django_advanced_1.app.forms",
        "description": "lection_1.kbtu_django_advanced_1.app.forms",
        "peekOfCode": "class Student(forms.Form):\n    name = forms.CharField(max_length=50, label='name')",
        "detail": "lection_1.kbtu_django_advanced_1.app.forms",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "lection_1.kbtu_django_advanced_1.app.urls",
        "description": "lection_1.kbtu_django_advanced_1.app.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"\", index, name='index'),\n    path(\"add\", add_student, name='add'),\n]",
        "detail": "lection_1.kbtu_django_advanced_1.app.urls",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "lection_1.kbtu_django_advanced_1.app.views",
        "description": "lection_1.kbtu_django_advanced_1.app.views",
        "peekOfCode": "def index(request):\n    return render(request, 'index.html', {\n        'students': students\n    })\ndef add_student(request):\n    form = Student(request.POST)\n    if request.method == \"POST\":\n        if form.is_valid():\n            student_name = form.cleaned_data['name']\n            students.append(student_name)",
        "detail": "lection_1.kbtu_django_advanced_1.app.views",
        "documentation": {}
    },
    {
        "label": "add_student",
        "kind": 2,
        "importPath": "lection_1.kbtu_django_advanced_1.app.views",
        "description": "lection_1.kbtu_django_advanced_1.app.views",
        "peekOfCode": "def add_student(request):\n    form = Student(request.POST)\n    if request.method == \"POST\":\n        if form.is_valid():\n            student_name = form.cleaned_data['name']\n            students.append(student_name)\n        else:\n            raise Exception(\"No valid Student\")\n    return render(request, 'form.html', {'form': form})",
        "detail": "lection_1.kbtu_django_advanced_1.app.views",
        "documentation": {}
    },
    {
        "label": "students",
        "kind": 5,
        "importPath": "lection_1.kbtu_django_advanced_1.app.views",
        "description": "lection_1.kbtu_django_advanced_1.app.views",
        "peekOfCode": "students = [\n    'Zhanserik',\n    'Arslan',\n    'Askar',\n    'Test',\n]\ndef index(request):\n    return render(request, 'index.html', {\n        'students': students\n    })",
        "detail": "lection_1.kbtu_django_advanced_1.app.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "lection_1.kbtu_django_advanced_1.kbtu_django_advanced_1.asgi",
        "description": "lection_1.kbtu_django_advanced_1.kbtu_django_advanced_1.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "lection_1.kbtu_django_advanced_1.kbtu_django_advanced_1.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "lection_1.kbtu_django_advanced_1.kbtu_django_advanced_1.settings",
        "description": "lection_1.kbtu_django_advanced_1.kbtu_django_advanced_1.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = \"django-insecure-sgzyn=&e26a6jss6)hak@!asq2kd1#_lh4x8rh_q_-h)05rh-2\"\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [",
        "detail": "lection_1.kbtu_django_advanced_1.kbtu_django_advanced_1.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "lection_1.kbtu_django_advanced_1.kbtu_django_advanced_1.settings",
        "description": "lection_1.kbtu_django_advanced_1.kbtu_django_advanced_1.settings",
        "peekOfCode": "SECRET_KEY = \"django-insecure-sgzyn=&e26a6jss6)hak@!asq2kd1#_lh4x8rh_q_-h)05rh-2\"\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",",
        "detail": "lection_1.kbtu_django_advanced_1.kbtu_django_advanced_1.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "lection_1.kbtu_django_advanced_1.kbtu_django_advanced_1.settings",
        "description": "lection_1.kbtu_django_advanced_1.kbtu_django_advanced_1.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",",
        "detail": "lection_1.kbtu_django_advanced_1.kbtu_django_advanced_1.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "lection_1.kbtu_django_advanced_1.kbtu_django_advanced_1.settings",
        "description": "lection_1.kbtu_django_advanced_1.kbtu_django_advanced_1.settings",
        "peekOfCode": "ALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n    \"app\",",
        "detail": "lection_1.kbtu_django_advanced_1.kbtu_django_advanced_1.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "lection_1.kbtu_django_advanced_1.kbtu_django_advanced_1.settings",
        "description": "lection_1.kbtu_django_advanced_1.kbtu_django_advanced_1.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n    \"app\",\n]\nMIDDLEWARE = [",
        "detail": "lection_1.kbtu_django_advanced_1.kbtu_django_advanced_1.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "lection_1.kbtu_django_advanced_1.kbtu_django_advanced_1.settings",
        "description": "lection_1.kbtu_django_advanced_1.kbtu_django_advanced_1.settings",
        "peekOfCode": "MIDDLEWARE = [\n    \"django.middleware.security.SecurityMiddleware\",\n    \"django.contrib.sessions.middleware.SessionMiddleware\",\n    \"django.middleware.common.CommonMiddleware\",\n    \"django.middleware.csrf.CsrfViewMiddleware\",\n    \"django.contrib.auth.middleware.AuthenticationMiddleware\",\n    \"django.contrib.messages.middleware.MessageMiddleware\",\n    \"django.middleware.clickjacking.XFrameOptionsMiddleware\",\n]\nROOT_URLCONF = \"kbtu_django_advanced_1.urls\"",
        "detail": "lection_1.kbtu_django_advanced_1.kbtu_django_advanced_1.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "lection_1.kbtu_django_advanced_1.kbtu_django_advanced_1.settings",
        "description": "lection_1.kbtu_django_advanced_1.kbtu_django_advanced_1.settings",
        "peekOfCode": "ROOT_URLCONF = \"kbtu_django_advanced_1.urls\"\nTEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",",
        "detail": "lection_1.kbtu_django_advanced_1.kbtu_django_advanced_1.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "lection_1.kbtu_django_advanced_1.kbtu_django_advanced_1.settings",
        "description": "lection_1.kbtu_django_advanced_1.kbtu_django_advanced_1.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",\n                \"django.contrib.auth.context_processors.auth\",",
        "detail": "lection_1.kbtu_django_advanced_1.kbtu_django_advanced_1.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "lection_1.kbtu_django_advanced_1.kbtu_django_advanced_1.settings",
        "description": "lection_1.kbtu_django_advanced_1.kbtu_django_advanced_1.settings",
        "peekOfCode": "WSGI_APPLICATION = \"kbtu_django_advanced_1.wsgi.application\"\n# Database\n# https://docs.djangoproject.com/en/5.0/ref/settings/#databases\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.sqlite3\",\n        \"NAME\": BASE_DIR / \"db.sqlite3\",\n    }\n}\n# Password validation",
        "detail": "lection_1.kbtu_django_advanced_1.kbtu_django_advanced_1.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "lection_1.kbtu_django_advanced_1.kbtu_django_advanced_1.settings",
        "description": "lection_1.kbtu_django_advanced_1.kbtu_django_advanced_1.settings",
        "peekOfCode": "DATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.sqlite3\",\n        \"NAME\": BASE_DIR / \"db.sqlite3\",\n    }\n}\n# Password validation\n# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "lection_1.kbtu_django_advanced_1.kbtu_django_advanced_1.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "lection_1.kbtu_django_advanced_1.kbtu_django_advanced_1.settings",
        "description": "lection_1.kbtu_django_advanced_1.kbtu_django_advanced_1.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.UserAttributeSimilarityValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.MinimumLengthValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.CommonPasswordValidator\",\n    },",
        "detail": "lection_1.kbtu_django_advanced_1.kbtu_django_advanced_1.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "lection_1.kbtu_django_advanced_1.kbtu_django_advanced_1.settings",
        "description": "lection_1.kbtu_django_advanced_1.kbtu_django_advanced_1.settings",
        "peekOfCode": "LANGUAGE_CODE = \"en-us\"\nTIME_ZONE = \"UTC\"\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = \"static/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "lection_1.kbtu_django_advanced_1.kbtu_django_advanced_1.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "lection_1.kbtu_django_advanced_1.kbtu_django_advanced_1.settings",
        "description": "lection_1.kbtu_django_advanced_1.kbtu_django_advanced_1.settings",
        "peekOfCode": "TIME_ZONE = \"UTC\"\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = \"static/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "lection_1.kbtu_django_advanced_1.kbtu_django_advanced_1.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "lection_1.kbtu_django_advanced_1.kbtu_django_advanced_1.settings",
        "description": "lection_1.kbtu_django_advanced_1.kbtu_django_advanced_1.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = \"static/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "lection_1.kbtu_django_advanced_1.kbtu_django_advanced_1.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "lection_1.kbtu_django_advanced_1.kbtu_django_advanced_1.settings",
        "description": "lection_1.kbtu_django_advanced_1.kbtu_django_advanced_1.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = \"static/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "lection_1.kbtu_django_advanced_1.kbtu_django_advanced_1.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "lection_1.kbtu_django_advanced_1.kbtu_django_advanced_1.settings",
        "description": "lection_1.kbtu_django_advanced_1.kbtu_django_advanced_1.settings",
        "peekOfCode": "STATIC_URL = \"static/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "lection_1.kbtu_django_advanced_1.kbtu_django_advanced_1.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "lection_1.kbtu_django_advanced_1.kbtu_django_advanced_1.settings",
        "description": "lection_1.kbtu_django_advanced_1.kbtu_django_advanced_1.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "lection_1.kbtu_django_advanced_1.kbtu_django_advanced_1.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "lection_1.kbtu_django_advanced_1.kbtu_django_advanced_1.urls",
        "description": "lection_1.kbtu_django_advanced_1.kbtu_django_advanced_1.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"admin/\", admin.site.urls),\n    path(\"app/\", include(\"app.urls\")),\n]",
        "detail": "lection_1.kbtu_django_advanced_1.kbtu_django_advanced_1.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "lection_1.kbtu_django_advanced_1.kbtu_django_advanced_1.wsgi",
        "description": "lection_1.kbtu_django_advanced_1.kbtu_django_advanced_1.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "lection_1.kbtu_django_advanced_1.kbtu_django_advanced_1.wsgi",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "lection_1.kbtu_django_advanced_1.manage",
        "description": "lection_1.kbtu_django_advanced_1.manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"kbtu_django_advanced_1.settings\")\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "lection_1.kbtu_django_advanced_1.manage",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "lesson_5.alembic.versions.309e1316142a_relationship_builder",
        "description": "lesson_5.alembic.versions.309e1316142a_relationship_builder",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.add_column('presidents', sa.Column('country_id', sa.Integer(), nullable=False))\n    op.create_foreign_key(None, 'presidents', 'countries', ['country_id'], ['id'])\n    # ### end Alembic commands ###\ndef downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_constraint(None, 'presidents', type_='foreignkey')\n    op.drop_column('presidents', 'country_id')\n    # ### end Alembic commands ###",
        "detail": "lesson_5.alembic.versions.309e1316142a_relationship_builder",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "lesson_5.alembic.versions.309e1316142a_relationship_builder",
        "description": "lesson_5.alembic.versions.309e1316142a_relationship_builder",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_constraint(None, 'presidents', type_='foreignkey')\n    op.drop_column('presidents', 'country_id')\n    # ### end Alembic commands ###",
        "detail": "lesson_5.alembic.versions.309e1316142a_relationship_builder",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "lesson_5.alembic.versions.40a151b8e643_initial_migration",
        "description": "lesson_5.alembic.versions.40a151b8e643_initial_migration",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('citizens',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('name', sa.String(), nullable=False),\n    sa.Column('age', sa.Integer(), nullable=False),\n    sa.PrimaryKeyConstraint('id')\n    )\n    op.create_table('countries',\n    sa.Column('id', sa.Integer(), nullable=False),",
        "detail": "lesson_5.alembic.versions.40a151b8e643_initial_migration",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "lesson_5.alembic.versions.40a151b8e643_initial_migration",
        "description": "lesson_5.alembic.versions.40a151b8e643_initial_migration",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_table('presidents')\n    op.drop_table('countries')\n    op.drop_table('citizens')\n    # ### end Alembic commands ###",
        "detail": "lesson_5.alembic.versions.40a151b8e643_initial_migration",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "lesson_5.alembic.versions.cb81d8b75bca_update_database",
        "description": "lesson_5.alembic.versions.cb81d8b75bca_update_database",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_table('countries')\n    op.drop_table('citizens')\n    op.drop_table('presidents')\n    # ### end Alembic commands ###\ndef downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('presidents',\n    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),",
        "detail": "lesson_5.alembic.versions.cb81d8b75bca_update_database",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "lesson_5.alembic.versions.cb81d8b75bca_update_database",
        "description": "lesson_5.alembic.versions.cb81d8b75bca_update_database",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('presidents',\n    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),\n    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),\n    sa.Column('country_id', sa.INTEGER(), autoincrement=False, nullable=False),\n    sa.ForeignKeyConstraint(['country_id'], ['countries.id'], name='presidents_country_id_fkey'),\n    sa.PrimaryKeyConstraint('id', name='presidents_pkey')\n    )\n    op.create_table('citizens',",
        "detail": "lesson_5.alembic.versions.cb81d8b75bca_update_database",
        "documentation": {}
    },
    {
        "label": "run_migrations_offline",
        "kind": 2,
        "importPath": "lesson_5.alembic.env",
        "description": "lesson_5.alembic.env",
        "peekOfCode": "def run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n    Calls to context.execute() here emit the given string to the\n    script output.\n    \"\"\"\n    url = config.get_main_option(\"sqlalchemy.url\")",
        "detail": "lesson_5.alembic.env",
        "documentation": {}
    },
    {
        "label": "run_migrations_online",
        "kind": 2,
        "importPath": "lesson_5.alembic.env",
        "description": "lesson_5.alembic.env",
        "peekOfCode": "def run_migrations_online() -> None:\n    \"\"\"Run migrations in 'online' mode.\n    In this scenario we need to create an Engine\n    and associate a connection with the context.\n    \"\"\"\n    connectable = engine_from_config(\n        config.get_section(config.config_ini_section, {}),\n        prefix=\"sqlalchemy.\",\n        poolclass=pool.NullPool,\n    )",
        "detail": "lesson_5.alembic.env",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "lesson_5.alembic.env",
        "description": "lesson_5.alembic.env",
        "peekOfCode": "config = context.config\nconfig.set_main_option(\"sqlalchemy.url\", url)\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nif config.config_file_name is not None:\n    fileConfig(config.config_file_name)\n# add your model's MetaData object here\n# for 'autogenerate' support\n# from myapp import mymodel\n# target_metadata = mymodel.Base.metadata",
        "detail": "lesson_5.alembic.env",
        "documentation": {}
    },
    {
        "label": "target_metadata",
        "kind": 5,
        "importPath": "lesson_5.alembic.env",
        "description": "lesson_5.alembic.env",
        "peekOfCode": "target_metadata = Base.metadata\n# other values from the config, defined by the needs of env.py,\n# can be acquired:\n# my_important_option = config.get_main_option(\"my_important_option\")\n# ... etc.\ndef run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation",
        "detail": "lesson_5.alembic.env",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": "lesson_5.database",
        "description": "lesson_5.database",
        "peekOfCode": "url = 'postgresql://postgres:postgres@localhost/postgres'\nengine = create_engine(url)\nsession = Session(engine)\nBase = declarative_base()",
        "detail": "lesson_5.database",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "lesson_5.database",
        "description": "lesson_5.database",
        "peekOfCode": "engine = create_engine(url)\nsession = Session(engine)\nBase = declarative_base()",
        "detail": "lesson_5.database",
        "documentation": {}
    },
    {
        "label": "session",
        "kind": 5,
        "importPath": "lesson_5.database",
        "description": "lesson_5.database",
        "peekOfCode": "session = Session(engine)\nBase = declarative_base()",
        "detail": "lesson_5.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "lesson_5.database",
        "description": "lesson_5.database",
        "peekOfCode": "Base = declarative_base()",
        "detail": "lesson_5.database",
        "documentation": {}
    },
    {
        "label": "Dependency",
        "kind": 6,
        "importPath": "lesson_5.main",
        "description": "lesson_5.main",
        "peekOfCode": "class Dependency:\n    def __init__(self, repo: AbcRepository):\n        self.repo = repo\n    def __call__(self, id: int) -> ReturnType:\n        return self.repo.get_by_id(id)\ndef get_container(repository: type[AbcRepository]) -> punq.Container:\n    container = punq.Container()\n    container.register(AbcRepository, instance=repository(session=session))\n    container.register(Dependency)\n    return container",
        "detail": "lesson_5.main",
        "documentation": {}
    },
    {
        "label": "get_container",
        "kind": 2,
        "importPath": "lesson_5.main",
        "description": "lesson_5.main",
        "peekOfCode": "def get_container(repository: type[AbcRepository]) -> punq.Container:\n    container = punq.Container()\n    container.register(AbcRepository, instance=repository(session=session))\n    container.register(Dependency)\n    return container\napp.add_api_route(\"/workers\", get_container(WorkerRepository).resolve(Dependency), methods=[\"GET\"])\napp.add_api_route(\"/companies\", get_container(CompanyRepository).resolve(Dependency), methods=[\"GET\"])\n@app.post('/add_worker')\ndef add_worker(worker: CreateWorker) -> str:\n    session.add(db.Worker(**worker.model_dump()))",
        "detail": "lesson_5.main",
        "documentation": {}
    },
    {
        "label": "add_worker",
        "kind": 2,
        "importPath": "lesson_5.main",
        "description": "lesson_5.main",
        "peekOfCode": "def add_worker(worker: CreateWorker) -> str:\n    session.add(db.Worker(**worker.model_dump()))\n    session.commit()\n    session.close()\n    return \"Worker was added\"\n@app.post('/add_company')\ndef add_company(company: CreateCompany):\n    session.add(db.Company(**company.model_dump()))\n    session.commit()\n    session.close()",
        "detail": "lesson_5.main",
        "documentation": {}
    },
    {
        "label": "add_company",
        "kind": 2,
        "importPath": "lesson_5.main",
        "description": "lesson_5.main",
        "peekOfCode": "def add_company(company: CreateCompany):\n    session.add(db.Company(**company.model_dump()))\n    session.commit()\n    session.close()\n    return \"Company was added\"\n@app.get(\"/company\")\ndef get_company():\n    db_companies = session.execute(select(db.Company)).scalars().all()\n    companies = []\n    for db_company in db_companies:",
        "detail": "lesson_5.main",
        "documentation": {}
    },
    {
        "label": "get_company",
        "kind": 2,
        "importPath": "lesson_5.main",
        "description": "lesson_5.main",
        "peekOfCode": "def get_company():\n    db_companies = session.execute(select(db.Company)).scalars().all()\n    companies = []\n    for db_company in db_companies:\n        companies.append(Company.model_validate(db_company))\n    return companies\n@app.post('/add_job')\ndef add_job(job: CreateJob):\n    session.add(db.Job(**job.model_dump()))\n    session.commit()",
        "detail": "lesson_5.main",
        "documentation": {}
    },
    {
        "label": "add_job",
        "kind": 2,
        "importPath": "lesson_5.main",
        "description": "lesson_5.main",
        "peekOfCode": "def add_job(job: CreateJob):\n    session.add(db.Job(**job.model_dump()))\n    session.commit()\n    session.close()\n    return \"Job was added\"\n@app.get(\"/job\")\ndef get_job():\n    db_jobs = session.execute(select(db.Job)).scalars().all()\n    jobs = []\n    for db_job in db_jobs:",
        "detail": "lesson_5.main",
        "documentation": {}
    },
    {
        "label": "get_job",
        "kind": 2,
        "importPath": "lesson_5.main",
        "description": "lesson_5.main",
        "peekOfCode": "def get_job():\n    db_jobs = session.execute(select(db.Job)).scalars().all()\n    jobs = []\n    for db_job in db_jobs:\n        jobs.append(Job.model_validate(db_job))\n    return jobs",
        "detail": "lesson_5.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "lesson_5.main",
        "description": "lesson_5.main",
        "peekOfCode": "app = FastAPI()\nclass Dependency:\n    def __init__(self, repo: AbcRepository):\n        self.repo = repo\n    def __call__(self, id: int) -> ReturnType:\n        return self.repo.get_by_id(id)\ndef get_container(repository: type[AbcRepository]) -> punq.Container:\n    container = punq.Container()\n    container.register(AbcRepository, instance=repository(session=session))\n    container.register(Dependency)",
        "detail": "lesson_5.main",
        "documentation": {}
    },
    {
        "label": "Job",
        "kind": 6,
        "importPath": "lesson_5.models",
        "description": "lesson_5.models",
        "peekOfCode": "class Job(Base):\n    __tablename__ = 'jobs'\n    id: Mapped[_id]\n    title: Mapped[str]\n    description: Mapped[str]\n    company_id: Mapped[int] = sqlalchemy.Column(sqlalchemy.Integer, sqlalchemy.ForeignKey('companies.id'))\n    company: Mapped['Company'] = relationship('Company', back_populates='jobs')\nclass Worker(Base):\n    __tablename__ = 'workers'\n    id: Mapped[_id]",
        "detail": "lesson_5.models",
        "documentation": {}
    },
    {
        "label": "Worker",
        "kind": 6,
        "importPath": "lesson_5.models",
        "description": "lesson_5.models",
        "peekOfCode": "class Worker(Base):\n    __tablename__ = 'workers'\n    id: Mapped[_id]\n    name: Mapped[str]\n    age: Mapped[int]\n    job_id: Mapped[int] = sqlalchemy.Column(sqlalchemy.Integer, sqlalchemy.ForeignKey('jobs.id'))\n    job: Mapped[Job] = relationship('Job', back_populates='workers')\nclass Company(Base):\n    __tablename__ = 'companies'\n    id: Mapped[_id]",
        "detail": "lesson_5.models",
        "documentation": {}
    },
    {
        "label": "Company",
        "kind": 6,
        "importPath": "lesson_5.models",
        "description": "lesson_5.models",
        "peekOfCode": "class Company(Base):\n    __tablename__ = 'companies'\n    id: Mapped[_id]\n    name: Mapped[str]\n    industry: Mapped[str]\n    jobs: Mapped[List[Job]] = relationship('Job', back_populates='company')",
        "detail": "lesson_5.models",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "lesson_5.models",
        "description": "lesson_5.models",
        "peekOfCode": "Base = declarative_base()\n_id = Annotated[int, sqlalchemy.Column(sqlalchemy.Integer, primary_key=True)]\nclass Job(Base):\n    __tablename__ = 'jobs'\n    id: Mapped[_id]\n    title: Mapped[str]\n    description: Mapped[str]\n    company_id: Mapped[int] = sqlalchemy.Column(sqlalchemy.Integer, sqlalchemy.ForeignKey('companies.id'))\n    company: Mapped['Company'] = relationship('Company', back_populates='jobs')\nclass Worker(Base):",
        "detail": "lesson_5.models",
        "documentation": {}
    },
    {
        "label": "_id",
        "kind": 5,
        "importPath": "lesson_5.models",
        "description": "lesson_5.models",
        "peekOfCode": "_id = Annotated[int, sqlalchemy.Column(sqlalchemy.Integer, primary_key=True)]\nclass Job(Base):\n    __tablename__ = 'jobs'\n    id: Mapped[_id]\n    title: Mapped[str]\n    description: Mapped[str]\n    company_id: Mapped[int] = sqlalchemy.Column(sqlalchemy.Integer, sqlalchemy.ForeignKey('companies.id'))\n    company: Mapped['Company'] = relationship('Company', back_populates='jobs')\nclass Worker(Base):\n    __tablename__ = 'workers'",
        "detail": "lesson_5.models",
        "documentation": {}
    },
    {
        "label": "AbcRepository",
        "kind": 6,
        "importPath": "lesson_5.repository",
        "description": "lesson_5.repository",
        "peekOfCode": "class AbcRepository:\n    @abstractmethod\n    def __init__(self, session: Session):\n        pass\n    @abstractmethod\n    def get_by_id(self, id: int) -> ReturnType:\n        raise NotImplementedError()\nclass WorkerRepository(AbcRepository):\n    def __init__(self, session: Session):\n        self._session = session",
        "detail": "lesson_5.repository",
        "documentation": {}
    },
    {
        "label": "WorkerRepository",
        "kind": 6,
        "importPath": "lesson_5.repository",
        "description": "lesson_5.repository",
        "peekOfCode": "class WorkerRepository(AbcRepository):\n    def __init__(self, session: Session):\n        self._session = session\n    def get_by_id(self, id: int) -> Worker:\n        db_worker = self._session.get(db.Worker, id)\n        return Worker.model_validate(db_worker)\nclass CompanyRepository(AbcRepository):\n    def __init__(self, session: Session):\n        self.session = session\n    def get_by_id(self, id: int) -> Company:",
        "detail": "lesson_5.repository",
        "documentation": {}
    },
    {
        "label": "CompanyRepository",
        "kind": 6,
        "importPath": "lesson_5.repository",
        "description": "lesson_5.repository",
        "peekOfCode": "class CompanyRepository(AbcRepository):\n    def __init__(self, session: Session):\n        self.session = session\n    def get_by_id(self, id: int) -> Company:\n        db_company = self.session.get(db.Company, id)\n        return Company.model_validate(db_company)",
        "detail": "lesson_5.repository",
        "documentation": {}
    },
    {
        "label": "BaseJob",
        "kind": 6,
        "importPath": "lesson_5.schemas",
        "description": "lesson_5.schemas",
        "peekOfCode": "class BaseJob(BaseModel):\n    title: str\n    description: str\n    class Config:\n        from_attributes = True\nclass Job(BaseJob):\n    id: int\nclass CreateJob(BaseJob):\n    pass\nclass BaseCompany(BaseModel):",
        "detail": "lesson_5.schemas",
        "documentation": {}
    },
    {
        "label": "Job",
        "kind": 6,
        "importPath": "lesson_5.schemas",
        "description": "lesson_5.schemas",
        "peekOfCode": "class Job(BaseJob):\n    id: int\nclass CreateJob(BaseJob):\n    pass\nclass BaseCompany(BaseModel):\n    name: str\n    industry: str\n    established_date: date\n    class Config:\n        from_attributes = True",
        "detail": "lesson_5.schemas",
        "documentation": {}
    },
    {
        "label": "CreateJob",
        "kind": 6,
        "importPath": "lesson_5.schemas",
        "description": "lesson_5.schemas",
        "peekOfCode": "class CreateJob(BaseJob):\n    pass\nclass BaseCompany(BaseModel):\n    name: str\n    industry: str\n    established_date: date\n    class Config:\n        from_attributes = True\nclass CreateCompany(BaseCompany):\n    pass",
        "detail": "lesson_5.schemas",
        "documentation": {}
    },
    {
        "label": "BaseCompany",
        "kind": 6,
        "importPath": "lesson_5.schemas",
        "description": "lesson_5.schemas",
        "peekOfCode": "class BaseCompany(BaseModel):\n    name: str\n    industry: str\n    established_date: date\n    class Config:\n        from_attributes = True\nclass CreateCompany(BaseCompany):\n    pass\nclass Company(BaseCompany):\n    id: int",
        "detail": "lesson_5.schemas",
        "documentation": {}
    },
    {
        "label": "CreateCompany",
        "kind": 6,
        "importPath": "lesson_5.schemas",
        "description": "lesson_5.schemas",
        "peekOfCode": "class CreateCompany(BaseCompany):\n    pass\nclass Company(BaseCompany):\n    id: int\nclass BaseWorker(BaseModel):\n    name: str\n    age: int\n    class Config:\n        from_attributes = True\nclass CreateWorker(BaseWorker):",
        "detail": "lesson_5.schemas",
        "documentation": {}
    },
    {
        "label": "Company",
        "kind": 6,
        "importPath": "lesson_5.schemas",
        "description": "lesson_5.schemas",
        "peekOfCode": "class Company(BaseCompany):\n    id: int\nclass BaseWorker(BaseModel):\n    name: str\n    age: int\n    class Config:\n        from_attributes = True\nclass CreateWorker(BaseWorker):\n    job_id: int\nclass Worker(BaseWorker):",
        "detail": "lesson_5.schemas",
        "documentation": {}
    },
    {
        "label": "BaseWorker",
        "kind": 6,
        "importPath": "lesson_5.schemas",
        "description": "lesson_5.schemas",
        "peekOfCode": "class BaseWorker(BaseModel):\n    name: str\n    age: int\n    class Config:\n        from_attributes = True\nclass CreateWorker(BaseWorker):\n    job_id: int\nclass Worker(BaseWorker):\n    id: int\n    job: Job",
        "detail": "lesson_5.schemas",
        "documentation": {}
    },
    {
        "label": "CreateWorker",
        "kind": 6,
        "importPath": "lesson_5.schemas",
        "description": "lesson_5.schemas",
        "peekOfCode": "class CreateWorker(BaseWorker):\n    job_id: int\nclass Worker(BaseWorker):\n    id: int\n    job: Job\nReturnType = Worker | Company | Job",
        "detail": "lesson_5.schemas",
        "documentation": {}
    },
    {
        "label": "Worker",
        "kind": 6,
        "importPath": "lesson_5.schemas",
        "description": "lesson_5.schemas",
        "peekOfCode": "class Worker(BaseWorker):\n    id: int\n    job: Job\nReturnType = Worker | Company | Job",
        "detail": "lesson_5.schemas",
        "documentation": {}
    },
    {
        "label": "ReturnType",
        "kind": 5,
        "importPath": "lesson_5.schemas",
        "description": "lesson_5.schemas",
        "peekOfCode": "ReturnType = Worker | Company | Job",
        "detail": "lesson_5.schemas",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "lesson_hey.main",
        "description": "lesson_hey.main",
        "peekOfCode": "def test(name: str):\n    return not name == \"Arslan\"\n@app.get(\"/drug\")\ndef drug_endpoint(name: str):\n    time.sleep(10)\n    return test(name)\n@app.get(\"/psycho\")\ndef psycho_endpoint(name: str):\n    time.sleep(15)\n    return test(name)",
        "detail": "lesson_hey.main",
        "documentation": {}
    },
    {
        "label": "drug_endpoint",
        "kind": 2,
        "importPath": "lesson_hey.main",
        "description": "lesson_hey.main",
        "peekOfCode": "def drug_endpoint(name: str):\n    time.sleep(10)\n    return test(name)\n@app.get(\"/psycho\")\ndef psycho_endpoint(name: str):\n    time.sleep(15)\n    return test(name)\n@app.get(\"/crime\")\ndef crime_endpoint(name: str):\n    time.sleep(10)",
        "detail": "lesson_hey.main",
        "documentation": {}
    },
    {
        "label": "psycho_endpoint",
        "kind": 2,
        "importPath": "lesson_hey.main",
        "description": "lesson_hey.main",
        "peekOfCode": "def psycho_endpoint(name: str):\n    time.sleep(15)\n    return test(name)\n@app.get(\"/crime\")\ndef crime_endpoint(name: str):\n    time.sleep(10)\n    return test(name)",
        "detail": "lesson_hey.main",
        "documentation": {}
    },
    {
        "label": "crime_endpoint",
        "kind": 2,
        "importPath": "lesson_hey.main",
        "description": "lesson_hey.main",
        "peekOfCode": "def crime_endpoint(name: str):\n    time.sleep(10)\n    return test(name)",
        "detail": "lesson_hey.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "lesson_hey.main",
        "description": "lesson_hey.main",
        "peekOfCode": "app = FastAPI()\ndef test(name: str):\n    return not name == \"Arslan\"\n@app.get(\"/drug\")\ndef drug_endpoint(name: str):\n    time.sleep(10)\n    return test(name)\n@app.get(\"/psycho\")\ndef psycho_endpoint(name: str):\n    time.sleep(15)",
        "detail": "lesson_hey.main",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "midterm.alembic.versions.0a5674af834f_book",
        "description": "midterm.alembic.versions.0a5674af834f_book",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('authors',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('name', sa.String(), nullable=True),\n    sa.PrimaryKeyConstraint('id')\n    )\n    op.create_index(op.f('ix_authors_id'), 'authors', ['id'], unique=False)\n    op.create_table('categories',\n    sa.Column('id', sa.Integer(), nullable=False),",
        "detail": "midterm.alembic.versions.0a5674af834f_book",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "midterm.alembic.versions.0a5674af834f_book",
        "description": "midterm.alembic.versions.0a5674af834f_book",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('teachers',\n    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),\n    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),\n    sa.Column('yea', sa.INTEGER(), autoincrement=False, nullable=False),\n    sa.PrimaryKeyConstraint('id', name='teachers_pkey')\n    )\n    op.create_table('students',\n    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),",
        "detail": "midterm.alembic.versions.0a5674af834f_book",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "midterm.alembic.versions.14cb7633a334_ghost",
        "description": "midterm.alembic.versions.14cb7633a334_ghost",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('customers',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('name', sa.String(), nullable=True),\n    sa.PrimaryKeyConstraint('id')\n    )\n    op.create_index(op.f('ix_customers_id'), 'customers', ['id'], unique=False)\n    op.create_table('cart',\n    sa.Column('id', sa.Integer(), nullable=False),",
        "detail": "midterm.alembic.versions.14cb7633a334_ghost",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "midterm.alembic.versions.14cb7633a334_ghost",
        "description": "midterm.alembic.versions.14cb7633a334_ghost",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_index(op.f('ix_orders_id'), table_name='orders')\n    op.drop_table('orders')\n    op.drop_index(op.f('ix_cart_id'), table_name='cart')\n    op.drop_table('cart')\n    op.drop_index(op.f('ix_customers_id'), table_name='customers')\n    op.drop_table('customers')\n    # ### end Alembic commands ###",
        "detail": "midterm.alembic.versions.14cb7633a334_ghost",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "midterm.alembic.versions.4511a4480ead_initial_migration",
        "description": "midterm.alembic.versions.4511a4480ead_initial_migration",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('students',\n    sa.Column('id', sa.INTEGER(), nullable=False),\n    sa.Column('name', sa.String(), nullable=False),\n    sa.Column('age', sa.Integer(), nullable=False),\n    sa.PrimaryKeyConstraint('id')\n    )\n    op.create_table('teachers',\n    sa.Column('id', sa.INTEGER(), nullable=False),",
        "detail": "midterm.alembic.versions.4511a4480ead_initial_migration",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "midterm.alembic.versions.4511a4480ead_initial_migration",
        "description": "midterm.alembic.versions.4511a4480ead_initial_migration",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_table('teachers')\n    op.drop_table('students')\n    # ### end Alembic commands ###",
        "detail": "midterm.alembic.versions.4511a4480ead_initial_migration",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "midterm.alembic.versions.b130eec3147f_wtf",
        "description": "midterm.alembic.versions.b130eec3147f_wtf",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###\ndef downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###",
        "detail": "midterm.alembic.versions.b130eec3147f_wtf",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "midterm.alembic.versions.b130eec3147f_wtf",
        "description": "midterm.alembic.versions.b130eec3147f_wtf",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###",
        "detail": "midterm.alembic.versions.b130eec3147f_wtf",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "midterm.alembic.versions.be101e3a1df0_product_delete",
        "description": "midterm.alembic.versions.be101e3a1df0_product_delete",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###\ndef downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###",
        "detail": "midterm.alembic.versions.be101e3a1df0_product_delete",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "midterm.alembic.versions.be101e3a1df0_product_delete",
        "description": "midterm.alembic.versions.be101e3a1df0_product_delete",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###",
        "detail": "midterm.alembic.versions.be101e3a1df0_product_delete",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "midterm.alembic.versions.fb1391204958_product",
        "description": "midterm.alembic.versions.fb1391204958_product",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('suppliers',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('name', sa.String(), nullable=True),\n    sa.PrimaryKeyConstraint('id')\n    )\n    op.create_index(op.f('ix_suppliers_id'), 'suppliers', ['id'], unique=False)\n    op.create_table('products',\n    sa.Column('id', sa.Integer(), nullable=False),",
        "detail": "midterm.alembic.versions.fb1391204958_product",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "midterm.alembic.versions.fb1391204958_product",
        "description": "midterm.alembic.versions.fb1391204958_product",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('authors',\n    sa.Column('id', sa.INTEGER(), server_default=sa.text(\"nextval('authors_id_seq'::regclass)\"), autoincrement=True, nullable=False),\n    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),\n    sa.PrimaryKeyConstraint('id', name='authors_pkey'),\n    postgresql_ignore_search_path=False\n    )\n    op.create_index('ix_authors_id', 'authors', ['id'], unique=False)\n    op.create_table('books',",
        "detail": "midterm.alembic.versions.fb1391204958_product",
        "documentation": {}
    },
    {
        "label": "run_migrations_offline",
        "kind": 2,
        "importPath": "midterm.alembic.env",
        "description": "midterm.alembic.env",
        "peekOfCode": "def run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n    Calls to context.execute() here emit the given string to the\n    script output.\n    \"\"\"\n    url = config.get_main_option(\"sqlalchemy.url\")",
        "detail": "midterm.alembic.env",
        "documentation": {}
    },
    {
        "label": "run_migrations_online",
        "kind": 2,
        "importPath": "midterm.alembic.env",
        "description": "midterm.alembic.env",
        "peekOfCode": "def run_migrations_online() -> None:\n    \"\"\"Run migrations in 'online' mode.\n    In this scenario we need to create an Engine\n    and associate a connection with the context.\n    \"\"\"\n    connectable = engine_from_config(\n        config.get_section(config.config_ini_section, {}),\n        prefix=\"sqlalchemy.\",\n        poolclass=pool.NullPool,\n    )",
        "detail": "midterm.alembic.env",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "midterm.alembic.env",
        "description": "midterm.alembic.env",
        "peekOfCode": "config = context.config\nconfig.set_main_option(\"sqlalchemy.url\", url)\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nif config.config_file_name is not None:\n    fileConfig(config.config_file_name)\n# add your model's MetaData object here\n# for 'autogenerate' support\n# from myapp import mymodel\n# target_metadata = mymodel.Base.metadata",
        "detail": "midterm.alembic.env",
        "documentation": {}
    },
    {
        "label": "target_metadata",
        "kind": 5,
        "importPath": "midterm.alembic.env",
        "description": "midterm.alembic.env",
        "peekOfCode": "target_metadata = Base.metadata\n# other values from the config, defined by the needs of env.py,\n# can be acquired:\n# my_important_option = config.get_main_option(\"my_important_option\")\n# ... etc.\ndef run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation",
        "detail": "midterm.alembic.env",
        "documentation": {}
    },
    {
        "label": "Product",
        "kind": 6,
        "importPath": "midterm.database",
        "description": "midterm.database",
        "peekOfCode": "class Product(Base):\n    __tablename__ = 'products'\n    id = sa.Column(sa.Integer, primary_key=True, index=True)\n    name = sa.Column(sa.String)\n    supplier_id = sa.Column(sa.Integer, sa.ForeignKey('suppliers.id'))\n    category_id = sa.Column(sa.Integer, sa.ForeignKey('categories.id'))\n    supplier = relationship(\"Supplier\", back_populates=\"products\")\n    category = relationship(\"Category\", back_populates=\"products\")\nclass Supplier(Base):\n    __tablename__ = 'suppliers'",
        "detail": "midterm.database",
        "documentation": {}
    },
    {
        "label": "Supplier",
        "kind": 6,
        "importPath": "midterm.database",
        "description": "midterm.database",
        "peekOfCode": "class Supplier(Base):\n    __tablename__ = 'suppliers'\n    id = sa.Column(sa.Integer, primary_key=True, index=True)\n    name = sa.Column(sa.String)\n    products = relationship(\"Product\", back_populates=\"supplier\")\nclass Category(Base):\n    __tablename__ = 'categories'\n    id = sa.Column(sa.Integer, primary_key=True, index=True)\n    name = sa.Column(sa.String)\n    products = relationship(\"Product\", back_populates=\"category\")",
        "detail": "midterm.database",
        "documentation": {}
    },
    {
        "label": "Category",
        "kind": 6,
        "importPath": "midterm.database",
        "description": "midterm.database",
        "peekOfCode": "class Category(Base):\n    __tablename__ = 'categories'\n    id = sa.Column(sa.Integer, primary_key=True, index=True)\n    name = sa.Column(sa.String)\n    products = relationship(\"Product\", back_populates=\"category\")\nclass Order(Base):\n    __tablename__ = 'orders'\n    id = sa.Column(sa.Integer, primary_key=True, index=True)\n    product_id = sa.Column(sa.Integer, sa.ForeignKey('products.id'))\n    quantity = sa.Column(sa.Integer)",
        "detail": "midterm.database",
        "documentation": {}
    },
    {
        "label": "Order",
        "kind": 6,
        "importPath": "midterm.database",
        "description": "midterm.database",
        "peekOfCode": "class Order(Base):\n    __tablename__ = 'orders'\n    id = sa.Column(sa.Integer, primary_key=True, index=True)\n    product_id = sa.Column(sa.Integer, sa.ForeignKey('products.id'))\n    quantity = sa.Column(sa.Integer)\nclass Customer(Base):\n    __tablename__ = 'customers'\n    id = sa.Column(sa.Integer, primary_key=True, index=True)\n    name = sa.Column(sa.String)\nclass Cart(Base):",
        "detail": "midterm.database",
        "documentation": {}
    },
    {
        "label": "Customer",
        "kind": 6,
        "importPath": "midterm.database",
        "description": "midterm.database",
        "peekOfCode": "class Customer(Base):\n    __tablename__ = 'customers'\n    id = sa.Column(sa.Integer, primary_key=True, index=True)\n    name = sa.Column(sa.String)\nclass Cart(Base):\n    __tablename__ = 'cart'\n    id = sa.Column(sa.Integer, primary_key=True, index=True)\n    customer_id = sa.Column(sa.Integer, sa.ForeignKey('customers.id'))\n    product_id = sa.Column(sa.Integer, sa.ForeignKey('products.id'))\n    quantity = sa.Column(sa.Integer)",
        "detail": "midterm.database",
        "documentation": {}
    },
    {
        "label": "Cart",
        "kind": 6,
        "importPath": "midterm.database",
        "description": "midterm.database",
        "peekOfCode": "class Cart(Base):\n    __tablename__ = 'cart'\n    id = sa.Column(sa.Integer, primary_key=True, index=True)\n    customer_id = sa.Column(sa.Integer, sa.ForeignKey('customers.id'))\n    product_id = sa.Column(sa.Integer, sa.ForeignKey('products.id'))\n    quantity = sa.Column(sa.Integer)",
        "detail": "midterm.database",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": "midterm.database",
        "description": "midterm.database",
        "peekOfCode": "url = \"postgresql://postgres:postgres@localhost/postgres\"\nengine = create_engine(url)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\nclass Product(Base):\n    __tablename__ = 'products'\n    id = sa.Column(sa.Integer, primary_key=True, index=True)\n    name = sa.Column(sa.String)\n    supplier_id = sa.Column(sa.Integer, sa.ForeignKey('suppliers.id'))\n    category_id = sa.Column(sa.Integer, sa.ForeignKey('categories.id'))",
        "detail": "midterm.database",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "midterm.database",
        "description": "midterm.database",
        "peekOfCode": "engine = create_engine(url)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\nclass Product(Base):\n    __tablename__ = 'products'\n    id = sa.Column(sa.Integer, primary_key=True, index=True)\n    name = sa.Column(sa.String)\n    supplier_id = sa.Column(sa.Integer, sa.ForeignKey('suppliers.id'))\n    category_id = sa.Column(sa.Integer, sa.ForeignKey('categories.id'))\n    supplier = relationship(\"Supplier\", back_populates=\"products\")",
        "detail": "midterm.database",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "kind": 5,
        "importPath": "midterm.database",
        "description": "midterm.database",
        "peekOfCode": "SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\nclass Product(Base):\n    __tablename__ = 'products'\n    id = sa.Column(sa.Integer, primary_key=True, index=True)\n    name = sa.Column(sa.String)\n    supplier_id = sa.Column(sa.Integer, sa.ForeignKey('suppliers.id'))\n    category_id = sa.Column(sa.Integer, sa.ForeignKey('categories.id'))\n    supplier = relationship(\"Supplier\", back_populates=\"products\")\n    category = relationship(\"Category\", back_populates=\"products\")",
        "detail": "midterm.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "midterm.database",
        "description": "midterm.database",
        "peekOfCode": "Base = declarative_base()\nclass Product(Base):\n    __tablename__ = 'products'\n    id = sa.Column(sa.Integer, primary_key=True, index=True)\n    name = sa.Column(sa.String)\n    supplier_id = sa.Column(sa.Integer, sa.ForeignKey('suppliers.id'))\n    category_id = sa.Column(sa.Integer, sa.ForeignKey('categories.id'))\n    supplier = relationship(\"Supplier\", back_populates=\"products\")\n    category = relationship(\"Category\", back_populates=\"products\")\nclass Supplier(Base):",
        "detail": "midterm.database",
        "documentation": {}
    },
    {
        "label": "Product",
        "kind": 6,
        "importPath": "midterm.main",
        "description": "midterm.main",
        "peekOfCode": "class Product(BaseModel):\n    id: int\n    name: str\n    supplier_id: int\n    category_id: int\n    class Config:\n        orm_mode = True\nclass Supplier(BaseModel):\n    id: int\n    name: str",
        "detail": "midterm.main",
        "documentation": {}
    },
    {
        "label": "Supplier",
        "kind": 6,
        "importPath": "midterm.main",
        "description": "midterm.main",
        "peekOfCode": "class Supplier(BaseModel):\n    id: int\n    name: str\n    class Config:\n        orm_mode = True\nclass Category(BaseModel):\n    id: int\n    name: str\n    class Config:\n        orm_mode = True",
        "detail": "midterm.main",
        "documentation": {}
    },
    {
        "label": "Category",
        "kind": 6,
        "importPath": "midterm.main",
        "description": "midterm.main",
        "peekOfCode": "class Category(BaseModel):\n    id: int\n    name: str\n    class Config:\n        orm_mode = True\nclass Order(BaseModel):\n    id: int\n    product_id: int\n    quantity: int\n    class Config:",
        "detail": "midterm.main",
        "documentation": {}
    },
    {
        "label": "Order",
        "kind": 6,
        "importPath": "midterm.main",
        "description": "midterm.main",
        "peekOfCode": "class Order(BaseModel):\n    id: int\n    product_id: int\n    quantity: int\n    class Config:\n        orm_mode = True\nclass Customer(BaseModel):\n    id: int\n    name: str\n    class Config:",
        "detail": "midterm.main",
        "documentation": {}
    },
    {
        "label": "Customer",
        "kind": 6,
        "importPath": "midterm.main",
        "description": "midterm.main",
        "peekOfCode": "class Customer(BaseModel):\n    id: int\n    name: str\n    class Config:\n        orm_mode = True\nclass Cart(BaseModel):\n    id: int\n    customer_id: int\n    product_id: int\n    quantity: int",
        "detail": "midterm.main",
        "documentation": {}
    },
    {
        "label": "Cart",
        "kind": 6,
        "importPath": "midterm.main",
        "description": "midterm.main",
        "peekOfCode": "class Cart(BaseModel):\n    id: int\n    customer_id: int\n    product_id: int\n    quantity: int\n    class Config:\n        orm_mode = True\ndef get_session():\n    session = db.SessionLocal()\n    try:",
        "detail": "midterm.main",
        "documentation": {}
    },
    {
        "label": "DelSession",
        "kind": 6,
        "importPath": "midterm.main",
        "description": "midterm.main",
        "peekOfCode": "class DelSession():\n    def __init__(self):\n        self.session = db.SessionLocal()\n    def __enter__(self):\n        return self.session\n    def __exit__(self, exc_type, exc_value, traceback):\n        self.session.close()\ndef get_db_session():\n    with DelSession() as session:\n        yield session",
        "detail": "midterm.main",
        "documentation": {}
    },
    {
        "label": "get_session",
        "kind": 2,
        "importPath": "midterm.main",
        "description": "midterm.main",
        "peekOfCode": "def get_session():\n    session = db.SessionLocal()\n    try:\n        yield session\n    finally:\n        session.close()\nclass DelSession():\n    def __init__(self):\n        self.session = db.SessionLocal()\n    def __enter__(self):",
        "detail": "midterm.main",
        "documentation": {}
    },
    {
        "label": "get_db_session",
        "kind": 2,
        "importPath": "midterm.main",
        "description": "midterm.main",
        "peekOfCode": "def get_db_session():\n    with DelSession() as session:\n        yield session\n@app.post('/product')\ndef create_product(product: Product, session: db.Session = Depends(get_db_session)):\n    session.add(db.Product(**product.dict()))\n    session.commit()\n    return f\"Product {product.name} created successfully\"\n@app.get('/products')\ndef get_products(session: db.Session = Depends(get_session)):",
        "detail": "midterm.main",
        "documentation": {}
    },
    {
        "label": "create_product",
        "kind": 2,
        "importPath": "midterm.main",
        "description": "midterm.main",
        "peekOfCode": "def create_product(product: Product, session: db.Session = Depends(get_db_session)):\n    session.add(db.Product(**product.dict()))\n    session.commit()\n    return f\"Product {product.name} created successfully\"\n@app.get('/products')\ndef get_products(session: db.Session = Depends(get_session)):\n    products = session.execute(select(db.Product)).scalars().all()\n    return products\n@app.get('/product/{product_id}')\ndef get_product(product_id: int, session: db.Session = Depends(get_session)):",
        "detail": "midterm.main",
        "documentation": {}
    },
    {
        "label": "get_products",
        "kind": 2,
        "importPath": "midterm.main",
        "description": "midterm.main",
        "peekOfCode": "def get_products(session: db.Session = Depends(get_session)):\n    products = session.execute(select(db.Product)).scalars().all()\n    return products\n@app.get('/product/{product_id}')\ndef get_product(product_id: int, session: db.Session = Depends(get_session)):\n    product = session.query(db.Product).filter(db.Product.id == product_id).first()\n    if product is None:\n        raise HTTPException(status_code=404, detail=\"Product not found\")\n    return product\n@app.post('/supplier')",
        "detail": "midterm.main",
        "documentation": {}
    },
    {
        "label": "get_product",
        "kind": 2,
        "importPath": "midterm.main",
        "description": "midterm.main",
        "peekOfCode": "def get_product(product_id: int, session: db.Session = Depends(get_session)):\n    product = session.query(db.Product).filter(db.Product.id == product_id).first()\n    if product is None:\n        raise HTTPException(status_code=404, detail=\"Product not found\")\n    return product\n@app.post('/supplier')\ndef create_supplier(supplier_name: str, session: db.Session = Depends(get_session)):\n    supplier = db.Supplier(name=supplier_name)\n    session.add(supplier)\n    session.commit()",
        "detail": "midterm.main",
        "documentation": {}
    },
    {
        "label": "create_supplier",
        "kind": 2,
        "importPath": "midterm.main",
        "description": "midterm.main",
        "peekOfCode": "def create_supplier(supplier_name: str, session: db.Session = Depends(get_session)):\n    supplier = db.Supplier(name=supplier_name)\n    session.add(supplier)\n    session.commit()\n    return f\"Supplier {supplier_name} created successfully\"\n@app.get('/suppliers')\ndef get_suppliers(session: db.Session = Depends(get_session)):\n    suppliers = session.execute(select(db.Supplier)).scalars().all()\n    return suppliers\n@app.post('/category')",
        "detail": "midterm.main",
        "documentation": {}
    },
    {
        "label": "get_suppliers",
        "kind": 2,
        "importPath": "midterm.main",
        "description": "midterm.main",
        "peekOfCode": "def get_suppliers(session: db.Session = Depends(get_session)):\n    suppliers = session.execute(select(db.Supplier)).scalars().all()\n    return suppliers\n@app.post('/category')\ndef create_category(category_name: str, session: db.Session = Depends(get_session)):\n    category = db.Category(name=category_name)\n    session.add(category)\n    session.commit()\n    return f\"Category {category_name} created successfully\"\n@app.get('/categories')",
        "detail": "midterm.main",
        "documentation": {}
    },
    {
        "label": "create_category",
        "kind": 2,
        "importPath": "midterm.main",
        "description": "midterm.main",
        "peekOfCode": "def create_category(category_name: str, session: db.Session = Depends(get_session)):\n    category = db.Category(name=category_name)\n    session.add(category)\n    session.commit()\n    return f\"Category {category_name} created successfully\"\n@app.get('/categories')\ndef get_categories(session: db.Session = Depends(get_session)):\n    categories = session.execute(select(db.Category)).scalars().all()\n    return categories\n@app.delete('/product/{product_id}')",
        "detail": "midterm.main",
        "documentation": {}
    },
    {
        "label": "get_categories",
        "kind": 2,
        "importPath": "midterm.main",
        "description": "midterm.main",
        "peekOfCode": "def get_categories(session: db.Session = Depends(get_session)):\n    categories = session.execute(select(db.Category)).scalars().all()\n    return categories\n@app.delete('/product/{product_id}')\ndef delete_product(product_id: int, session: db.Session = Depends(get_session)):\n    product = session.query(db.Product).filter(db.Product.id == product_id).first()\n    session.delete(product)\n    session.commit()\n    return f\"Product with ID {product_id} deleted successfully\"\n@app.delete('/supplier/{supplier_id}')",
        "detail": "midterm.main",
        "documentation": {}
    },
    {
        "label": "delete_product",
        "kind": 2,
        "importPath": "midterm.main",
        "description": "midterm.main",
        "peekOfCode": "def delete_product(product_id: int, session: db.Session = Depends(get_session)):\n    product = session.query(db.Product).filter(db.Product.id == product_id).first()\n    session.delete(product)\n    session.commit()\n    return f\"Product with ID {product_id} deleted successfully\"\n@app.delete('/supplier/{supplier_id}')\ndef delete_supplier(supplier_id: int, session: db.Session = Depends(get_db_session)):\n    supplier = session.query(db.Supplier).filter(db.Supplier.id == supplier_id).first()\n    session.delete(supplier)\n    session.commit()",
        "detail": "midterm.main",
        "documentation": {}
    },
    {
        "label": "delete_supplier",
        "kind": 2,
        "importPath": "midterm.main",
        "description": "midterm.main",
        "peekOfCode": "def delete_supplier(supplier_id: int, session: db.Session = Depends(get_db_session)):\n    supplier = session.query(db.Supplier).filter(db.Supplier.id == supplier_id).first()\n    session.delete(supplier)\n    session.commit()\n    return f\"Supplier with ID {supplier_id} deleted successfully\"\n@app.delete('/category/{category_id}')\ndef delete_category(category_id: int, session: db.Session = Depends(get_session)):\n    category = session.query(db.Category).filter(db.Category.id == category_id).first()\n    session.delete(category)\n    session.commit()",
        "detail": "midterm.main",
        "documentation": {}
    },
    {
        "label": "delete_category",
        "kind": 2,
        "importPath": "midterm.main",
        "description": "midterm.main",
        "peekOfCode": "def delete_category(category_id: int, session: db.Session = Depends(get_session)):\n    category = session.query(db.Category).filter(db.Category.id == category_id).first()\n    session.delete(category)\n    session.commit()\n    return f\"Category with ID {category_id} deleted successfully\"\n@app.put('/product/{product_id}')\ndef update_product(product_id: int, product: Product, session: db.Session = Depends(get_session)):\n    db_product = session.query(db.Product).filter(db.Product.id == product_id).first()\n    db_product.name = product.name\n    db_product.supplier_id = product.supplier_id",
        "detail": "midterm.main",
        "documentation": {}
    },
    {
        "label": "update_product",
        "kind": 2,
        "importPath": "midterm.main",
        "description": "midterm.main",
        "peekOfCode": "def update_product(product_id: int, product: Product, session: db.Session = Depends(get_session)):\n    db_product = session.query(db.Product).filter(db.Product.id == product_id).first()\n    db_product.name = product.name\n    db_product.supplier_id = product.supplier_id\n    db_product.category_id = product.category_id\n    session.commit()\n    return f\"Product with ID {product_id} updated successfully\"\n@app.put('/supplier/{supplier_id}')\ndef update_supplier(supplier_id: int, supplier_name: str, session: db.Session = Depends(get_session)):\n    db_supplier = session.query(db.Supplier).filter(db.Supplier.id == supplier_id).first()",
        "detail": "midterm.main",
        "documentation": {}
    },
    {
        "label": "update_supplier",
        "kind": 2,
        "importPath": "midterm.main",
        "description": "midterm.main",
        "peekOfCode": "def update_supplier(supplier_id: int, supplier_name: str, session: db.Session = Depends(get_session)):\n    db_supplier = session.query(db.Supplier).filter(db.Supplier.id == supplier_id).first()\n    db_supplier.name = supplier_name\n    session.commit()\n    return f\"Supplier with ID {supplier_id} updated successfully\"\n@app.put('/category/{category_id}')\ndef update_category(category_id: int, category_name: str, session: db.Session = Depends(get_session)):\n    db_category = session.query(db.Category).filter(db.Category.id == category_id).first()\n    db_category.name = category_name\n    session.commit()",
        "detail": "midterm.main",
        "documentation": {}
    },
    {
        "label": "update_category",
        "kind": 2,
        "importPath": "midterm.main",
        "description": "midterm.main",
        "peekOfCode": "def update_category(category_id: int, category_name: str, session: db.Session = Depends(get_session)):\n    db_category = session.query(db.Category).filter(db.Category.id == category_id).first()\n    db_category.name = category_name\n    session.commit()\n    return f\"Category with ID {category_id} updated successfully\"\n@app.post('/order')\ndef create_order(order: Order, session: db.Session = Depends(get_session)):\n    db_order = db.Order(**order.dict())\n    session.add(db_order)\n    session.commit()",
        "detail": "midterm.main",
        "documentation": {}
    },
    {
        "label": "create_order",
        "kind": 2,
        "importPath": "midterm.main",
        "description": "midterm.main",
        "peekOfCode": "def create_order(order: Order, session: db.Session = Depends(get_session)):\n    db_order = db.Order(**order.dict())\n    session.add(db_order)\n    session.commit()\n    return f\"Order with ID {db_order.id} created successfully\"\n@app.get('/orders')\ndef get_orders(session: db.Session = Depends(get_session)):\n    orders = session.execute(select(db.Order)).scalars().all()\n    return orders\n@app.post('/customer')",
        "detail": "midterm.main",
        "documentation": {}
    },
    {
        "label": "get_orders",
        "kind": 2,
        "importPath": "midterm.main",
        "description": "midterm.main",
        "peekOfCode": "def get_orders(session: db.Session = Depends(get_session)):\n    orders = session.execute(select(db.Order)).scalars().all()\n    return orders\n@app.post('/customer')\ndef create_customer(customer_name: str, session: db.Session = Depends(get_session)):\n    customer = db.Customer(name=customer_name)\n    session.add(customer)\n    session.commit()\n    return f\"Customer {customer_name} created successfully\"\n@app.get('/customers')",
        "detail": "midterm.main",
        "documentation": {}
    },
    {
        "label": "create_customer",
        "kind": 2,
        "importPath": "midterm.main",
        "description": "midterm.main",
        "peekOfCode": "def create_customer(customer_name: str, session: db.Session = Depends(get_session)):\n    customer = db.Customer(name=customer_name)\n    session.add(customer)\n    session.commit()\n    return f\"Customer {customer_name} created successfully\"\n@app.get('/customers')\ndef get_customers(session: db.Session = Depends(get_session)):\n    customers = session.execute(select(db.Customer)).scalars().all()\n    return customers\n@app.post('/cart')",
        "detail": "midterm.main",
        "documentation": {}
    },
    {
        "label": "get_customers",
        "kind": 2,
        "importPath": "midterm.main",
        "description": "midterm.main",
        "peekOfCode": "def get_customers(session: db.Session = Depends(get_session)):\n    customers = session.execute(select(db.Customer)).scalars().all()\n    return customers\n@app.post('/cart')\ndef add_to_cart(cart: Cart, session: db.Session = Depends(get_session)):\n    db_cart = db.Cart(**cart.dict())\n    session.add(db_cart)\n    session.commit()\n    return f\"Item added to cart successfully\"\n@app.get('/cart/{customer_id}')",
        "detail": "midterm.main",
        "documentation": {}
    },
    {
        "label": "add_to_cart",
        "kind": 2,
        "importPath": "midterm.main",
        "description": "midterm.main",
        "peekOfCode": "def add_to_cart(cart: Cart, session: db.Session = Depends(get_session)):\n    db_cart = db.Cart(**cart.dict())\n    session.add(db_cart)\n    session.commit()\n    return f\"Item added to cart successfully\"\n@app.get('/cart/{customer_id}')\ndef get_cart(customer_id: int, session: db.Session = Depends(get_session)):\n    cart_items = session.query(db.Cart).filter(db.Cart.customer_id == customer_id).all()\n    return cart_items\n@app.delete('/cart/{cart_id}')",
        "detail": "midterm.main",
        "documentation": {}
    },
    {
        "label": "get_cart",
        "kind": 2,
        "importPath": "midterm.main",
        "description": "midterm.main",
        "peekOfCode": "def get_cart(customer_id: int, session: db.Session = Depends(get_session)):\n    cart_items = session.query(db.Cart).filter(db.Cart.customer_id == customer_id).all()\n    return cart_items\n@app.delete('/cart/{cart_id}')\ndef remove_from_cart(cart_id: int, session: db.Session = Depends(get_session)):\n    cart_item = session.query(db.Cart).filter(db.Cart.id == cart_id).first()\n    session.delete(cart_item)\n    session.commit()\n    return f\"Item removed from cart successfully\"",
        "detail": "midterm.main",
        "documentation": {}
    },
    {
        "label": "remove_from_cart",
        "kind": 2,
        "importPath": "midterm.main",
        "description": "midterm.main",
        "peekOfCode": "def remove_from_cart(cart_id: int, session: db.Session = Depends(get_session)):\n    cart_item = session.query(db.Cart).filter(db.Cart.id == cart_id).first()\n    session.delete(cart_item)\n    session.commit()\n    return f\"Item removed from cart successfully\"",
        "detail": "midterm.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "midterm.main",
        "description": "midterm.main",
        "peekOfCode": "app = FastAPI()\nclass Product(BaseModel):\n    id: int\n    name: str\n    supplier_id: int\n    category_id: int\n    class Config:\n        orm_mode = True\nclass Supplier(BaseModel):\n    id: int",
        "detail": "midterm.main",
        "documentation": {}
    },
    {
        "label": "test_create_product",
        "kind": 2,
        "importPath": "midterm.test",
        "description": "midterm.test",
        "peekOfCode": "def test_create_product():\n    product_data = {\n        \"name\": \"Test Product\",\n        \"supplier_id\": 1,  \n        \"category_id\": 1  \n    }\n    response = requests.post(f\"{BASE_URL}/product\", json=product_data)\n    print(response.json())\ndef test_get_products():\n    response = requests.get(f\"{BASE_URL}/products\")",
        "detail": "midterm.test",
        "documentation": {}
    },
    {
        "label": "test_get_products",
        "kind": 2,
        "importPath": "midterm.test",
        "description": "midterm.test",
        "peekOfCode": "def test_get_products():\n    response = requests.get(f\"{BASE_URL}/products\")\n    print(response.json())\ndef test_delete_product(product_id):\n    response = requests.delete(f\"{BASE_URL}/product/{product_id}\")\n    print(response.json())\ndef test_create_supplier():\n    supplier_data = {\n        \"supplier_name\": \"Test Supplier\"\n    }",
        "detail": "midterm.test",
        "documentation": {}
    },
    {
        "label": "test_delete_product",
        "kind": 2,
        "importPath": "midterm.test",
        "description": "midterm.test",
        "peekOfCode": "def test_delete_product(product_id):\n    response = requests.delete(f\"{BASE_URL}/product/{product_id}\")\n    print(response.json())\ndef test_create_supplier():\n    supplier_data = {\n        \"supplier_name\": \"Test Supplier\"\n    }\n    response = requests.post(f\"{BASE_URL}/supplier\", json=supplier_data)\n    print(response.json())\ndef test_get_suppliers():",
        "detail": "midterm.test",
        "documentation": {}
    },
    {
        "label": "test_create_supplier",
        "kind": 2,
        "importPath": "midterm.test",
        "description": "midterm.test",
        "peekOfCode": "def test_create_supplier():\n    supplier_data = {\n        \"supplier_name\": \"Test Supplier\"\n    }\n    response = requests.post(f\"{BASE_URL}/supplier\", json=supplier_data)\n    print(response.json())\ndef test_get_suppliers():\n    response = requests.get(f\"{BASE_URL}/suppliers\")\n    print(response.json())\ndef test_delete_supplier(supplier_id):",
        "detail": "midterm.test",
        "documentation": {}
    },
    {
        "label": "test_get_suppliers",
        "kind": 2,
        "importPath": "midterm.test",
        "description": "midterm.test",
        "peekOfCode": "def test_get_suppliers():\n    response = requests.get(f\"{BASE_URL}/suppliers\")\n    print(response.json())\ndef test_delete_supplier(supplier_id):\n    response = requests.delete(f\"{BASE_URL}/supplier/{supplier_id}\")\n    print(response.json())  \ndef test_create_category():\n    category_data = {\n        \"category_name\": \"Test Category\"\n    }",
        "detail": "midterm.test",
        "documentation": {}
    },
    {
        "label": "test_delete_supplier",
        "kind": 2,
        "importPath": "midterm.test",
        "description": "midterm.test",
        "peekOfCode": "def test_delete_supplier(supplier_id):\n    response = requests.delete(f\"{BASE_URL}/supplier/{supplier_id}\")\n    print(response.json())  \ndef test_create_category():\n    category_data = {\n        \"category_name\": \"Test Category\"\n    }\n    response = requests.post(f\"{BASE_URL}/category\", json=category_data)\n    print(response.json())\ndef test_get_categories():",
        "detail": "midterm.test",
        "documentation": {}
    },
    {
        "label": "test_create_category",
        "kind": 2,
        "importPath": "midterm.test",
        "description": "midterm.test",
        "peekOfCode": "def test_create_category():\n    category_data = {\n        \"category_name\": \"Test Category\"\n    }\n    response = requests.post(f\"{BASE_URL}/category\", json=category_data)\n    print(response.json())\ndef test_get_categories():\n    response = requests.get(f\"{BASE_URL}/categories\")\n    print(response.json())\ndef test_delete_category(category_id):",
        "detail": "midterm.test",
        "documentation": {}
    },
    {
        "label": "test_get_categories",
        "kind": 2,
        "importPath": "midterm.test",
        "description": "midterm.test",
        "peekOfCode": "def test_get_categories():\n    response = requests.get(f\"{BASE_URL}/categories\")\n    print(response.json())\ndef test_delete_category(category_id):\n    response = requests.delete(f\"{BASE_URL}/category/{category_id}\")\n    print(response.json())\nif __name__ == \"__main__\":\n    test_create_product()\n    test_get_products()\ndef test_update_product(product_id):",
        "detail": "midterm.test",
        "documentation": {}
    },
    {
        "label": "test_delete_category",
        "kind": 2,
        "importPath": "midterm.test",
        "description": "midterm.test",
        "peekOfCode": "def test_delete_category(category_id):\n    response = requests.delete(f\"{BASE_URL}/category/{category_id}\")\n    print(response.json())\nif __name__ == \"__main__\":\n    test_create_product()\n    test_get_products()\ndef test_update_product(product_id):\n    product_data = {\n        \"name\": \"Updated Product\",\n        \"supplier_id\": 2,  ",
        "detail": "midterm.test",
        "documentation": {}
    },
    {
        "label": "test_update_product",
        "kind": 2,
        "importPath": "midterm.test",
        "description": "midterm.test",
        "peekOfCode": "def test_update_product(product_id):\n    product_data = {\n        \"name\": \"Updated Product\",\n        \"supplier_id\": 2,  \n        \"category_id\": 2  \n    }\n    response = requests.put(f\"{BASE_URL}/product/{product_id}\", json=product_data)\n    print(response.json())\ndef test_update_supplier(supplier_id):\n    supplier_data = {",
        "detail": "midterm.test",
        "documentation": {}
    },
    {
        "label": "test_update_supplier",
        "kind": 2,
        "importPath": "midterm.test",
        "description": "midterm.test",
        "peekOfCode": "def test_update_supplier(supplier_id):\n    supplier_data = {\n        \"supplier_name\": \"Updated Supplier\"\n    }\n    response = requests.put(f\"{BASE_URL}/supplier/{supplier_id}\", json=supplier_data)\n    print(response.json())\ndef test_update_category(category_id):\n    category_data = {\n        \"category_name\": \"Updated Category\"\n    }",
        "detail": "midterm.test",
        "documentation": {}
    },
    {
        "label": "test_update_category",
        "kind": 2,
        "importPath": "midterm.test",
        "description": "midterm.test",
        "peekOfCode": "def test_update_category(category_id):\n    category_data = {\n        \"category_name\": \"Updated Category\"\n    }\n    response = requests.put(f\"{BASE_URL}/category/{category_id}\", json=category_data)\n    print(response.json())\ndef test_create_order():\n    order_data = {\n        \"product_id\": 1,\n        \"quantity\": 10",
        "detail": "midterm.test",
        "documentation": {}
    },
    {
        "label": "test_create_order",
        "kind": 2,
        "importPath": "midterm.test",
        "description": "midterm.test",
        "peekOfCode": "def test_create_order():\n    order_data = {\n        \"product_id\": 1,\n        \"quantity\": 10\n    }\n    response = requests.post(f\"{BASE_URL}/order\", json=order_data)\n    print(response.json())\ndef test_create_customer():\n    customer_data = {\n        \"name\": \"Test Customer\"",
        "detail": "midterm.test",
        "documentation": {}
    },
    {
        "label": "test_create_customer",
        "kind": 2,
        "importPath": "midterm.test",
        "description": "midterm.test",
        "peekOfCode": "def test_create_customer():\n    customer_data = {\n        \"name\": \"Test Customer\"\n    }\n    response = requests.post(f\"{BASE_URL}/customer\", json=customer_data)\n    print(response.json())",
        "detail": "midterm.test",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": "midterm.test",
        "description": "midterm.test",
        "peekOfCode": "BASE_URL = \"http://localhost:8000\"\ndef test_create_product():\n    product_data = {\n        \"name\": \"Test Product\",\n        \"supplier_id\": 1,  \n        \"category_id\": 1  \n    }\n    response = requests.post(f\"{BASE_URL}/product\", json=product_data)\n    print(response.json())\ndef test_get_products():",
        "detail": "midterm.test",
        "documentation": {}
    },
    {
        "label": "Movie",
        "kind": 6,
        "importPath": "practice_2.fastapi.main",
        "description": "practice_2.fastapi.main",
        "peekOfCode": "class Movie(BaseModel):\n    name: str\n    description: str\n    rating: float = Field(ge=0, le=10)\n    director: str\nmovies : Movie = []\n@app.get('/movies/{movie_id}')\ndef get_movie(movie_id: int) -> Movie:\n    return movies[movie_id]\n@app.get('/movies')",
        "detail": "practice_2.fastapi.main",
        "documentation": {}
    },
    {
        "label": "get_movie",
        "kind": 2,
        "importPath": "practice_2.fastapi.main",
        "description": "practice_2.fastapi.main",
        "peekOfCode": "def get_movie(movie_id: int) -> Movie:\n    return movies[movie_id]\n@app.get('/movies')\ndef get_all_movies() -> list[Movie]:\n    return movies\n@app.get('/movies/rating/{rating}')\ndef get_rating(rating: float) -> list[Movie]:\n    return sorted([i for i in movies if i.rating >= rating], key=lambda f : f.rating)\n@app.post(\"/addMovies\")\ndef addMovie(movie: Movie) -> str:",
        "detail": "practice_2.fastapi.main",
        "documentation": {}
    },
    {
        "label": "get_all_movies",
        "kind": 2,
        "importPath": "practice_2.fastapi.main",
        "description": "practice_2.fastapi.main",
        "peekOfCode": "def get_all_movies() -> list[Movie]:\n    return movies\n@app.get('/movies/rating/{rating}')\ndef get_rating(rating: float) -> list[Movie]:\n    return sorted([i for i in movies if i.rating >= rating], key=lambda f : f.rating)\n@app.post(\"/addMovies\")\ndef addMovie(movie: Movie) -> str:\n    movies.append(movie)\n    return \"Movie was added\"",
        "detail": "practice_2.fastapi.main",
        "documentation": {}
    },
    {
        "label": "get_rating",
        "kind": 2,
        "importPath": "practice_2.fastapi.main",
        "description": "practice_2.fastapi.main",
        "peekOfCode": "def get_rating(rating: float) -> list[Movie]:\n    return sorted([i for i in movies if i.rating >= rating], key=lambda f : f.rating)\n@app.post(\"/addMovies\")\ndef addMovie(movie: Movie) -> str:\n    movies.append(movie)\n    return \"Movie was added\"",
        "detail": "practice_2.fastapi.main",
        "documentation": {}
    },
    {
        "label": "addMovie",
        "kind": 2,
        "importPath": "practice_2.fastapi.main",
        "description": "practice_2.fastapi.main",
        "peekOfCode": "def addMovie(movie: Movie) -> str:\n    movies.append(movie)\n    return \"Movie was added\"",
        "detail": "practice_2.fastapi.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "practice_2.fastapi.main",
        "description": "practice_2.fastapi.main",
        "peekOfCode": "app = FastAPI(\n    title='Movie App'\n)\nclass Movie(BaseModel):\n    name: str\n    description: str\n    rating: float = Field(ge=0, le=10)\n    director: str\nmovies : Movie = []\n@app.get('/movies/{movie_id}')",
        "detail": "practice_2.fastapi.main",
        "documentation": {}
    },
    {
        "label": "FootballTeam",
        "kind": 6,
        "importPath": "practice_3.main",
        "description": "practice_3.main",
        "peekOfCode": "class FootballTeam(BaseModel):\n    title: str\n    country: str\nclass FootballSubLayer:\n    def __init__(self, log_message: str):\n        self.log_message = log_message\n    def add_team(self, football_team: FootballTeam):\n        print(self.log_message)\n        football.append(football_team)\n        return f\"{football_team.title} was added \"",
        "detail": "practice_3.main",
        "documentation": {}
    },
    {
        "label": "FootballSubLayer",
        "kind": 6,
        "importPath": "practice_3.main",
        "description": "practice_3.main",
        "peekOfCode": "class FootballSubLayer:\n    def __init__(self, log_message: str):\n        self.log_message = log_message\n    def add_team(self, football_team: FootballTeam):\n        print(self.log_message)\n        football.append(football_team)\n        return f\"{football_team.title} was added \"\n    def delete_football_team(self, del_team: FootballTeam):\n        for team in football:\n            if team.title == del_team.title:",
        "detail": "practice_3.main",
        "documentation": {}
    },
    {
        "label": "FootballMainLayer",
        "kind": 6,
        "importPath": "practice_3.main",
        "description": "practice_3.main",
        "peekOfCode": "class FootballMainLayer:\n    def __init__(self, repo: FootballSubLayer):\n        self.repo = repo\n    def add_team(self, football_team: FootballTeam):\n        print('Some Logging')\n        self.repo.add_team(football_team)\n        print('End logging')\n        return 'team was added'\n    def delete_football_team(self, del_team: FootballTeam):\n        return self.repo.delete_football_team(del_team)",
        "detail": "practice_3.main",
        "documentation": {}
    },
    {
        "label": "get_container",
        "kind": 2,
        "importPath": "practice_3.main",
        "description": "practice_3.main",
        "peekOfCode": "def get_container() -> punq.Container:\n    container = punq.Container()\n    container.register(FootballSubLayer, instance=FootballSubLayer(log_message='I am inside sub layer'))\n    container.register(FootballMainLayer)\n    return container\n@app.get('/teams')\ndef get_teams() -> list[FootballTeam]:\n    return football\n@app.post(\"/add_team\")\ndef add_team(football_team: Annotated[str, Depends(get_container().resolve(FootballMainLayer).add_team)]) -> str:",
        "detail": "practice_3.main",
        "documentation": {}
    },
    {
        "label": "get_teams",
        "kind": 2,
        "importPath": "practice_3.main",
        "description": "practice_3.main",
        "peekOfCode": "def get_teams() -> list[FootballTeam]:\n    return football\n@app.post(\"/add_team\")\ndef add_team(football_team: Annotated[str, Depends(get_container().resolve(FootballMainLayer).add_team)]) -> str:\n    return football_team\n@app.delete('/remove_team')\ndef del_team(football_team: Annotated[str, Depends(get_container().resolve(FootballMainLayer).delete_football_team)]) -> str:\n    return football_team",
        "detail": "practice_3.main",
        "documentation": {}
    },
    {
        "label": "add_team",
        "kind": 2,
        "importPath": "practice_3.main",
        "description": "practice_3.main",
        "peekOfCode": "def add_team(football_team: Annotated[str, Depends(get_container().resolve(FootballMainLayer).add_team)]) -> str:\n    return football_team\n@app.delete('/remove_team')\ndef del_team(football_team: Annotated[str, Depends(get_container().resolve(FootballMainLayer).delete_football_team)]) -> str:\n    return football_team",
        "detail": "practice_3.main",
        "documentation": {}
    },
    {
        "label": "del_team",
        "kind": 2,
        "importPath": "practice_3.main",
        "description": "practice_3.main",
        "peekOfCode": "def del_team(football_team: Annotated[str, Depends(get_container().resolve(FootballMainLayer).delete_football_team)]) -> str:\n    return football_team",
        "detail": "practice_3.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "practice_3.main",
        "description": "practice_3.main",
        "peekOfCode": "app = FastAPI()\nfootball = []\nclass FootballTeam(BaseModel):\n    title: str\n    country: str\nclass FootballSubLayer:\n    def __init__(self, log_message: str):\n        self.log_message = log_message\n    def add_team(self, football_team: FootballTeam):\n        print(self.log_message)",
        "detail": "practice_3.main",
        "documentation": {}
    },
    {
        "label": "football",
        "kind": 5,
        "importPath": "practice_3.main",
        "description": "practice_3.main",
        "peekOfCode": "football = []\nclass FootballTeam(BaseModel):\n    title: str\n    country: str\nclass FootballSubLayer:\n    def __init__(self, log_message: str):\n        self.log_message = log_message\n    def add_team(self, football_team: FootballTeam):\n        print(self.log_message)\n        football.append(football_team)",
        "detail": "practice_3.main",
        "documentation": {}
    },
    {
        "label": "run_migrations_offline",
        "kind": 2,
        "importPath": "project.alembic.env",
        "description": "project.alembic.env",
        "peekOfCode": "def run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n    Calls to context.execute() here emit the given string to the\n    script output.\n    \"\"\"\n    url = config.get_main_option(\"sqlalchemy.url\")",
        "detail": "project.alembic.env",
        "documentation": {}
    },
    {
        "label": "run_migrations_online",
        "kind": 2,
        "importPath": "project.alembic.env",
        "description": "project.alembic.env",
        "peekOfCode": "def run_migrations_online() -> None:\n    \"\"\"Run migrations in 'online' mode.\n    In this scenario we need to create an Engine\n    and associate a connection with the context.\n    \"\"\"\n    connectable = engine_from_config(\n        config.get_section(config.config_ini_section, {}),\n        prefix=\"sqlalchemy.\",\n        poolclass=pool.NullPool,\n    )",
        "detail": "project.alembic.env",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "project.alembic.env",
        "description": "project.alembic.env",
        "peekOfCode": "config = context.config\nconfig.set_main_option(\"sqlalchemy.url\", url)\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nif config.config_file_name is not None:\n    fileConfig(config.config_file_name)\n# add your model's MetaData object here\n# for 'autogenerate' support\n# from myapp import mymodel\n# target_metadata = mymodel.Base.metadata",
        "detail": "project.alembic.env",
        "documentation": {}
    },
    {
        "label": "target_metadata",
        "kind": 5,
        "importPath": "project.alembic.env",
        "description": "project.alembic.env",
        "peekOfCode": "target_metadata = Base.metadata\n# other values from the config, defined by the needs of env.py,\n# can be acquired:\n# my_important_option = config.get_main_option(\"my_important_option\")\n# ... etc.\ndef run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation",
        "detail": "project.alembic.env",
        "documentation": {}
    },
    {
        "label": "BaseJob",
        "kind": 6,
        "importPath": "project.database",
        "description": "project.database",
        "peekOfCode": "class BaseJob(BaseModel):\n    title: str\n    description: str\n    class Config:\n        from_attributes = True\nclass Job(BaseJob):\n    __tablename__ = 'jobs'\n    id: int\n# class CreateJob(BaseJob):\n#     pass",
        "detail": "project.database",
        "documentation": {}
    },
    {
        "label": "Job",
        "kind": 6,
        "importPath": "project.database",
        "description": "project.database",
        "peekOfCode": "class Job(BaseJob):\n    __tablename__ = 'jobs'\n    id: int\n# class CreateJob(BaseJob):\n#     pass\nclass BaseCompany(BaseModel):\n    name: str\n    industry: str\n    established_date: date\n    class Config:",
        "detail": "project.database",
        "documentation": {}
    },
    {
        "label": "BaseCompany",
        "kind": 6,
        "importPath": "project.database",
        "description": "project.database",
        "peekOfCode": "class BaseCompany(BaseModel):\n    name: str\n    industry: str\n    established_date: date\n    class Config:\n        from_attributes = True\nclass Company(BaseCompany,):\n    __tablename__ = 'companies'\n    id: int\n# class CreateCompany(BaseCompany):",
        "detail": "project.database",
        "documentation": {}
    },
    {
        "label": "Company",
        "kind": 6,
        "importPath": "project.database",
        "description": "project.database",
        "peekOfCode": "class Company(BaseCompany,):\n    __tablename__ = 'companies'\n    id: int\n# class CreateCompany(BaseCompany):\n#     pass\nclass BaseWorker(BaseModel):\n    name: str\n    age: int\n    class Config:\n        from_attributes = True",
        "detail": "project.database",
        "documentation": {}
    },
    {
        "label": "BaseWorker",
        "kind": 6,
        "importPath": "project.database",
        "description": "project.database",
        "peekOfCode": "class BaseWorker(BaseModel):\n    name: str\n    age: int\n    class Config:\n        from_attributes = True\nclass Worker(BaseWorker):\n    __tablename__ = 'workers'\n    id: int\n    job_id: int\n# class CreateWorker(BaseWorker):",
        "detail": "project.database",
        "documentation": {}
    },
    {
        "label": "Worker",
        "kind": 6,
        "importPath": "project.database",
        "description": "project.database",
        "peekOfCode": "class Worker(BaseWorker):\n    __tablename__ = 'workers'\n    id: int\n    job_id: int\n# class CreateWorker(BaseWorker):\n#     pass\nReturnType = Worker | Company | Job",
        "detail": "project.database",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": "project.database",
        "description": "project.database",
        "peekOfCode": "url = \"postgresql://postgres:postgres@localhost/postgres\"\nengine = create_engine(url)\nsession = Session(engine)\nBase = declarative_base()\nclass BaseJob(BaseModel):\n    title: str\n    description: str\n    class Config:\n        from_attributes = True\nclass Job(BaseJob):",
        "detail": "project.database",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "project.database",
        "description": "project.database",
        "peekOfCode": "engine = create_engine(url)\nsession = Session(engine)\nBase = declarative_base()\nclass BaseJob(BaseModel):\n    title: str\n    description: str\n    class Config:\n        from_attributes = True\nclass Job(BaseJob):\n    __tablename__ = 'jobs'",
        "detail": "project.database",
        "documentation": {}
    },
    {
        "label": "session",
        "kind": 5,
        "importPath": "project.database",
        "description": "project.database",
        "peekOfCode": "session = Session(engine)\nBase = declarative_base()\nclass BaseJob(BaseModel):\n    title: str\n    description: str\n    class Config:\n        from_attributes = True\nclass Job(BaseJob):\n    __tablename__ = 'jobs'\n    id: int",
        "detail": "project.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "project.database",
        "description": "project.database",
        "peekOfCode": "Base = declarative_base()\nclass BaseJob(BaseModel):\n    title: str\n    description: str\n    class Config:\n        from_attributes = True\nclass Job(BaseJob):\n    __tablename__ = 'jobs'\n    id: int\n# class CreateJob(BaseJob):",
        "detail": "project.database",
        "documentation": {}
    },
    {
        "label": "ReturnType",
        "kind": 5,
        "importPath": "project.database",
        "description": "project.database",
        "peekOfCode": "ReturnType = Worker | Company | Job",
        "detail": "project.database",
        "documentation": {}
    },
    {
        "label": "Dependency",
        "kind": 6,
        "importPath": "project.main",
        "description": "project.main",
        "peekOfCode": "class Dependency:\n    def __init__(self, repo: AbcRepository):\n        self.repo = repo\n    def __call__(self, id: int) -> ReturnType:\n        return self.repo.get_by_id(id)\ndef get_container(repository: type[AbcRepository]) -> punq.Container:\n    container = punq.Container()\n    container.register(AbcRepository, instance=repository(session=session))\n    container.register(Dependency)\n    return container",
        "detail": "project.main",
        "documentation": {}
    },
    {
        "label": "get_container",
        "kind": 2,
        "importPath": "project.main",
        "description": "project.main",
        "peekOfCode": "def get_container(repository: type[AbcRepository]) -> punq.Container:\n    container = punq.Container()\n    container.register(AbcRepository, instance=repository(session=session))\n    container.register(Dependency)\n    return container\napp.add_api_route(\"/workers\", get_container(WorkerRepository).resolve(Dependency), methods=[\"GET\"])\napp.add_api_route(\"/companies\", get_container(CompanyRepository).resolve(Dependency), methods=[\"GET\"])\n@app.post('/add_worker')\ndef add_worker(worker: CreateWorker) -> str:\n    session.add(db.Worker(**worker.model_dump()))",
        "detail": "project.main",
        "documentation": {}
    },
    {
        "label": "add_worker",
        "kind": 2,
        "importPath": "project.main",
        "description": "project.main",
        "peekOfCode": "def add_worker(worker: CreateWorker) -> str:\n    session.add(db.Worker(**worker.model_dump()))\n    session.commit()\n    session.close()\n    return \"Worker was added\"\n@app.post('/add_company')\ndef add_company(company: CreateCompany):\n    session.add(db.Company(**company.model_dump()))\n    session.commit()\n    session.close()",
        "detail": "project.main",
        "documentation": {}
    },
    {
        "label": "add_company",
        "kind": 2,
        "importPath": "project.main",
        "description": "project.main",
        "peekOfCode": "def add_company(company: CreateCompany):\n    session.add(db.Company(**company.model_dump()))\n    session.commit()\n    session.close()\n    return \"Company was added\"\n@app.get(\"/company\")\ndef get_company():\n    db_companies = session.execute(select(db.Company)).scalars().all()\n    companies = []\n    for db_company in db_companies:",
        "detail": "project.main",
        "documentation": {}
    },
    {
        "label": "get_company",
        "kind": 2,
        "importPath": "project.main",
        "description": "project.main",
        "peekOfCode": "def get_company():\n    db_companies = session.execute(select(db.Company)).scalars().all()\n    companies = []\n    for db_company in db_companies:\n        companies.append(Company.model_validate(db_company))\n    return companies\n@app.post('/add_job')\ndef add_job(job: CreateJob):\n    session.add(db.Job(**job.model_dump()))\n    session.commit()",
        "detail": "project.main",
        "documentation": {}
    },
    {
        "label": "add_job",
        "kind": 2,
        "importPath": "project.main",
        "description": "project.main",
        "peekOfCode": "def add_job(job: CreateJob):\n    session.add(db.Job(**job.model_dump()))\n    session.commit()\n    session.close()\n    return \"Job was added\"\n@app.get(\"/job\")\ndef get_job():\n    db_jobs = session.execute(select(db.Job)).scalars().all()\n    jobs = []\n    for db_job in db_jobs:",
        "detail": "project.main",
        "documentation": {}
    },
    {
        "label": "get_job",
        "kind": 2,
        "importPath": "project.main",
        "description": "project.main",
        "peekOfCode": "def get_job():\n    db_jobs = session.execute(select(db.Job)).scalars().all()\n    jobs = []\n    for db_job in db_jobs:\n        jobs.append(Job.model_validate(db_job))\n    return jobs",
        "detail": "project.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "project.main",
        "description": "project.main",
        "peekOfCode": "app = FastAPI()\nclass Dependency:\n    def __init__(self, repo: AbcRepository):\n        self.repo = repo\n    def __call__(self, id: int) -> ReturnType:\n        return self.repo.get_by_id(id)\ndef get_container(repository: type[AbcRepository]) -> punq.Container:\n    container = punq.Container()\n    container.register(AbcRepository, instance=repository(session=session))\n    container.register(Dependency)",
        "detail": "project.main",
        "documentation": {}
    },
    {
        "label": "Job",
        "kind": 6,
        "importPath": "project.models",
        "description": "project.models",
        "peekOfCode": "class Job(Base):\n    __tablename__ = 'jobs'\n    id: Mapped[_id]\n    title: Mapped[str]\n    description: Mapped[str]\n    company_id: Mapped[int] = sqlalchemy.Column(sqlalchemy.Integer, sqlalchemy.ForeignKey('companies.id'))\n    company: Mapped['Company'] = relationship('Company', back_populates='jobs')\nclass Worker(Base):\n    __tablename__ = 'workers'\n    id: Mapped[_id]",
        "detail": "project.models",
        "documentation": {}
    },
    {
        "label": "Worker",
        "kind": 6,
        "importPath": "project.models",
        "description": "project.models",
        "peekOfCode": "class Worker(Base):\n    __tablename__ = 'workers'\n    id: Mapped[_id]\n    name: Mapped[str]\n    age: Mapped[int]\n    job_id: Mapped[int] = sqlalchemy.Column(sqlalchemy.Integer, sqlalchemy.ForeignKey('jobs.id'))\n    job: Mapped[Job] = relationship('Job', back_populates='workers')\nclass Company(Base):\n    __tablename__ = 'companies'\n    id: Mapped[_id]",
        "detail": "project.models",
        "documentation": {}
    },
    {
        "label": "Company",
        "kind": 6,
        "importPath": "project.models",
        "description": "project.models",
        "peekOfCode": "class Company(Base):\n    __tablename__ = 'companies'\n    id: Mapped[_id]\n    name: Mapped[str]\n    industry: Mapped[str]\n    jobs: Mapped[List[Job]] = relationship('Job', back_populates='company')",
        "detail": "project.models",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "project.models",
        "description": "project.models",
        "peekOfCode": "Base = declarative_base()\n_id = Annotated[int, sqlalchemy.Column(sqlalchemy.Integer, primary_key=True)]\nclass Job(Base):\n    __tablename__ = 'jobs'\n    id: Mapped[_id]\n    title: Mapped[str]\n    description: Mapped[str]\n    company_id: Mapped[int] = sqlalchemy.Column(sqlalchemy.Integer, sqlalchemy.ForeignKey('companies.id'))\n    company: Mapped['Company'] = relationship('Company', back_populates='jobs')\nclass Worker(Base):",
        "detail": "project.models",
        "documentation": {}
    },
    {
        "label": "_id",
        "kind": 5,
        "importPath": "project.models",
        "description": "project.models",
        "peekOfCode": "_id = Annotated[int, sqlalchemy.Column(sqlalchemy.Integer, primary_key=True)]\nclass Job(Base):\n    __tablename__ = 'jobs'\n    id: Mapped[_id]\n    title: Mapped[str]\n    description: Mapped[str]\n    company_id: Mapped[int] = sqlalchemy.Column(sqlalchemy.Integer, sqlalchemy.ForeignKey('companies.id'))\n    company: Mapped['Company'] = relationship('Company', back_populates='jobs')\nclass Worker(Base):\n    __tablename__ = 'workers'",
        "detail": "project.models",
        "documentation": {}
    },
    {
        "label": "AbcRepository",
        "kind": 6,
        "importPath": "project.repository",
        "description": "project.repository",
        "peekOfCode": "class AbcRepository:\n    @abstractmethod\n    def __init__(self, session: Session):\n        pass\n    @abstractmethod\n    def get_by_id(self, id: int) -> ReturnType:\n        raise NotImplementedError()\nclass WorkerRepository(AbcRepository):\n    def __init__(self, session: Session):\n        self._session = session",
        "detail": "project.repository",
        "documentation": {}
    },
    {
        "label": "WorkerRepository",
        "kind": 6,
        "importPath": "project.repository",
        "description": "project.repository",
        "peekOfCode": "class WorkerRepository(AbcRepository):\n    def __init__(self, session: Session):\n        self._session = session\n    def get_by_id(self, id: int) -> Worker:\n        db_worker = self._session.get(db.Worker, id)\n        return Worker.model_validate(db_worker)\nclass CompanyRepository(AbcRepository):\n    def __init__(self, session: Session):\n        self.session = session\n    def get_by_id(self, id: int) -> Company:",
        "detail": "project.repository",
        "documentation": {}
    },
    {
        "label": "CompanyRepository",
        "kind": 6,
        "importPath": "project.repository",
        "description": "project.repository",
        "peekOfCode": "class CompanyRepository(AbcRepository):\n    def __init__(self, session: Session):\n        self.session = session\n    def get_by_id(self, id: int) -> Company:\n        db_company = self.session.get(db.Company, id)\n        return Company.model_validate(db_company)",
        "detail": "project.repository",
        "documentation": {}
    },
    {
        "label": "run_migrations_offline",
        "kind": 2,
        "importPath": "project2.alembic.env",
        "description": "project2.alembic.env",
        "peekOfCode": "def run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n    Calls to context.execute() here emit the given string to the\n    script output.\n    \"\"\"\n    url = config.get_main_option(\"sqlalchemy.url\")",
        "detail": "project2.alembic.env",
        "documentation": {}
    },
    {
        "label": "run_migrations_online",
        "kind": 2,
        "importPath": "project2.alembic.env",
        "description": "project2.alembic.env",
        "peekOfCode": "def run_migrations_online() -> None:\n    \"\"\"Run migrations in 'online' mode.\n    In this scenario we need to create an Engine\n    and associate a connection with the context.\n    \"\"\"\n    connectable = engine_from_config(\n        config.get_section(config.config_ini_section, {}),\n        prefix=\"sqlalchemy.\",\n        poolclass=pool.NullPool,\n    )",
        "detail": "project2.alembic.env",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "project2.alembic.env",
        "description": "project2.alembic.env",
        "peekOfCode": "config = context.config\nconfig.set_main_option(\"sqlalchemy.url\", url)\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nif config.config_file_name is not None:\n    fileConfig(config.config_file_name)\n# add your model's MetaData object here\n# for 'autogenerate' support\n# from myapp import mymodel\n# target_metadata = mymodel.Base.metadata",
        "detail": "project2.alembic.env",
        "documentation": {}
    },
    {
        "label": "target_metadata",
        "kind": 5,
        "importPath": "project2.alembic.env",
        "description": "project2.alembic.env",
        "peekOfCode": "target_metadata = Base.metadata\n# other values from the config, defined by the needs of env.py,\n# can be acquired:\n# my_important_option = config.get_main_option(\"my_important_option\")\n# ... etc.\ndef run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation",
        "detail": "project2.alembic.env",
        "documentation": {}
    },
    {
        "label": "BaseJob",
        "kind": 6,
        "importPath": "project2.database",
        "description": "project2.database",
        "peekOfCode": "class BaseJob(BaseModel):\n    title: str\n    description: str\n    class Config:\n        from_attributes = True\nclass Job(BaseJob):\n    __tablename__ = 'jobs'\n    id: int\n# class CreateJob(BaseJob):\n#     pass",
        "detail": "project2.database",
        "documentation": {}
    },
    {
        "label": "Job",
        "kind": 6,
        "importPath": "project2.database",
        "description": "project2.database",
        "peekOfCode": "class Job(BaseJob):\n    __tablename__ = 'jobs'\n    id: int\n# class CreateJob(BaseJob):\n#     pass\nclass BaseCompany(BaseModel):\n    name: str\n    industry: str\n    established_date: date\n    class Config:",
        "detail": "project2.database",
        "documentation": {}
    },
    {
        "label": "BaseCompany",
        "kind": 6,
        "importPath": "project2.database",
        "description": "project2.database",
        "peekOfCode": "class BaseCompany(BaseModel):\n    name: str\n    industry: str\n    established_date: date\n    class Config:\n        from_attributes = True\nclass Company(BaseCompany,):\n    __tablename__ = 'companies'\n    id: int\n# class CreateCompany(BaseCompany):",
        "detail": "project2.database",
        "documentation": {}
    },
    {
        "label": "Company",
        "kind": 6,
        "importPath": "project2.database",
        "description": "project2.database",
        "peekOfCode": "class Company(BaseCompany,):\n    __tablename__ = 'companies'\n    id: int\n# class CreateCompany(BaseCompany):\n#     pass\nclass BaseWorker(BaseModel):\n    name: str\n    age: int\n    class Config:\n        from_attributes = True",
        "detail": "project2.database",
        "documentation": {}
    },
    {
        "label": "BaseWorker",
        "kind": 6,
        "importPath": "project2.database",
        "description": "project2.database",
        "peekOfCode": "class BaseWorker(BaseModel):\n    name: str\n    age: int\n    class Config:\n        from_attributes = True\nclass Worker(BaseWorker):\n    __tablename__ = 'workers'\n    id: int\n    job_id: int\n# class CreateWorker(BaseWorker):",
        "detail": "project2.database",
        "documentation": {}
    },
    {
        "label": "Worker",
        "kind": 6,
        "importPath": "project2.database",
        "description": "project2.database",
        "peekOfCode": "class Worker(BaseWorker):\n    __tablename__ = 'workers'\n    id: int\n    job_id: int\n# class CreateWorker(BaseWorker):\n#     pass\nReturnType = Worker | Company | Job",
        "detail": "project2.database",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": "project2.database",
        "description": "project2.database",
        "peekOfCode": "url = \"postgresql://postgres:postgres@localhost/postgres\"\nengine = create_engine(url)\nsession = Session(engine)\nBase = declarative_base()\nclass BaseJob(BaseModel):\n    title: str\n    description: str\n    class Config:\n        from_attributes = True\nclass Job(BaseJob):",
        "detail": "project2.database",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "project2.database",
        "description": "project2.database",
        "peekOfCode": "engine = create_engine(url)\nsession = Session(engine)\nBase = declarative_base()\nclass BaseJob(BaseModel):\n    title: str\n    description: str\n    class Config:\n        from_attributes = True\nclass Job(BaseJob):\n    __tablename__ = 'jobs'",
        "detail": "project2.database",
        "documentation": {}
    },
    {
        "label": "session",
        "kind": 5,
        "importPath": "project2.database",
        "description": "project2.database",
        "peekOfCode": "session = Session(engine)\nBase = declarative_base()\nclass BaseJob(BaseModel):\n    title: str\n    description: str\n    class Config:\n        from_attributes = True\nclass Job(BaseJob):\n    __tablename__ = 'jobs'\n    id: int",
        "detail": "project2.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "project2.database",
        "description": "project2.database",
        "peekOfCode": "Base = declarative_base()\nclass BaseJob(BaseModel):\n    title: str\n    description: str\n    class Config:\n        from_attributes = True\nclass Job(BaseJob):\n    __tablename__ = 'jobs'\n    id: int\n# class CreateJob(BaseJob):",
        "detail": "project2.database",
        "documentation": {}
    },
    {
        "label": "ReturnType",
        "kind": 5,
        "importPath": "project2.database",
        "description": "project2.database",
        "peekOfCode": "ReturnType = Worker | Company | Job",
        "detail": "project2.database",
        "documentation": {}
    },
    {
        "label": "Dependency",
        "kind": 6,
        "importPath": "project2.main",
        "description": "project2.main",
        "peekOfCode": "class Dependency:\n    def __init__(self, repo: AbcRepository):\n        self.repo = repo\n    def __call__(self, id: int) -> ReturnType:\n        return self.repo.get_by_id(id)\ndef get_container(repository: type[AbcRepository]) -> punq.Container:\n    container = punq.Container()\n    container.register(AbcRepository, instance=repository(session=session))\n    container.register(Dependency)\n    return container",
        "detail": "project2.main",
        "documentation": {}
    },
    {
        "label": "get_container",
        "kind": 2,
        "importPath": "project2.main",
        "description": "project2.main",
        "peekOfCode": "def get_container(repository: type[AbcRepository]) -> punq.Container:\n    container = punq.Container()\n    container.register(AbcRepository, instance=repository(session=session))\n    container.register(Dependency)\n    return container\napp.add_api_route(\"/workers\", get_container(WorkerRepository).resolve(Dependency), methods=[\"GET\"])\napp.add_api_route(\"/companies\", get_container(CompanyRepository).resolve(Dependency), methods=[\"GET\"])\n@app.post('/add_worker')\ndef add_worker(worker: CreateWorker) -> str:\n    session.add(db.Worker(**worker.model_dump()))",
        "detail": "project2.main",
        "documentation": {}
    },
    {
        "label": "add_worker",
        "kind": 2,
        "importPath": "project2.main",
        "description": "project2.main",
        "peekOfCode": "def add_worker(worker: CreateWorker) -> str:\n    session.add(db.Worker(**worker.model_dump()))\n    session.commit()\n    session.close()\n    return \"Worker was added\"\n@app.post('/add_company')\ndef add_company(company: CreateCompany):\n    session.add(db.Company(**company.model_dump()))\n    session.commit()\n    session.close()",
        "detail": "project2.main",
        "documentation": {}
    },
    {
        "label": "add_company",
        "kind": 2,
        "importPath": "project2.main",
        "description": "project2.main",
        "peekOfCode": "def add_company(company: CreateCompany):\n    session.add(db.Company(**company.model_dump()))\n    session.commit()\n    session.close()\n    return \"Company was added\"\n@app.get(\"/company\")\ndef get_company():\n    db_companies = session.execute(select(db.Company)).scalars().all()\n    companies = []\n    for db_company in db_companies:",
        "detail": "project2.main",
        "documentation": {}
    },
    {
        "label": "get_company",
        "kind": 2,
        "importPath": "project2.main",
        "description": "project2.main",
        "peekOfCode": "def get_company():\n    db_companies = session.execute(select(db.Company)).scalars().all()\n    companies = []\n    for db_company in db_companies:\n        companies.append(Company.model_validate(db_company))\n    return companies\n@app.post('/add_job')\ndef add_job(job: CreateJob):\n    session.add(db.Job(**job.model_dump()))\n    session.commit()",
        "detail": "project2.main",
        "documentation": {}
    },
    {
        "label": "add_job",
        "kind": 2,
        "importPath": "project2.main",
        "description": "project2.main",
        "peekOfCode": "def add_job(job: CreateJob):\n    session.add(db.Job(**job.model_dump()))\n    session.commit()\n    session.close()\n    return \"Job was added\"\n@app.get(\"/job\")\ndef get_job():\n    db_jobs = session.execute(select(db.Job)).scalars().all()\n    jobs = []\n    for db_job in db_jobs:",
        "detail": "project2.main",
        "documentation": {}
    },
    {
        "label": "get_job",
        "kind": 2,
        "importPath": "project2.main",
        "description": "project2.main",
        "peekOfCode": "def get_job():\n    db_jobs = session.execute(select(db.Job)).scalars().all()\n    jobs = []\n    for db_job in db_jobs:\n        jobs.append(Job.model_validate(db_job))\n    return jobs",
        "detail": "project2.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "project2.main",
        "description": "project2.main",
        "peekOfCode": "app = FastAPI()\nclass Dependency:\n    def __init__(self, repo: AbcRepository):\n        self.repo = repo\n    def __call__(self, id: int) -> ReturnType:\n        return self.repo.get_by_id(id)\ndef get_container(repository: type[AbcRepository]) -> punq.Container:\n    container = punq.Container()\n    container.register(AbcRepository, instance=repository(session=session))\n    container.register(Dependency)",
        "detail": "project2.main",
        "documentation": {}
    },
    {
        "label": "Job",
        "kind": 6,
        "importPath": "project2.models",
        "description": "project2.models",
        "peekOfCode": "class Job(Base):\n    __tablename__ = 'jobs'\n    id: Mapped[_id]\n    title: Mapped[str]\n    description: Mapped[str]\n    company_id: Mapped[int] = sqlalchemy.Column(sqlalchemy.Integer, sqlalchemy.ForeignKey('companies.id'))\n    company: Mapped['Company'] = relationship('Company', back_populates='jobs')\nclass Worker(Base):\n    __tablename__ = 'workers'\n    id: Mapped[_id]",
        "detail": "project2.models",
        "documentation": {}
    },
    {
        "label": "Worker",
        "kind": 6,
        "importPath": "project2.models",
        "description": "project2.models",
        "peekOfCode": "class Worker(Base):\n    __tablename__ = 'workers'\n    id: Mapped[_id]\n    name: Mapped[str]\n    age: Mapped[int]\n    job_id: Mapped[int] = sqlalchemy.Column(sqlalchemy.Integer, sqlalchemy.ForeignKey('jobs.id'))\n    job: Mapped[Job] = relationship('Job', back_populates='workers')\nclass Company(Base):\n    __tablename__ = 'companies'\n    id: Mapped[_id]",
        "detail": "project2.models",
        "documentation": {}
    },
    {
        "label": "Company",
        "kind": 6,
        "importPath": "project2.models",
        "description": "project2.models",
        "peekOfCode": "class Company(Base):\n    __tablename__ = 'companies'\n    id: Mapped[_id]\n    name: Mapped[str]\n    industry: Mapped[str]\n    jobs: Mapped[List[Job]] = relationship('Job', back_populates='company')",
        "detail": "project2.models",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "project2.models",
        "description": "project2.models",
        "peekOfCode": "Base = declarative_base()\n_id = Annotated[int, sqlalchemy.Column(sqlalchemy.Integer, primary_key=True)]\nclass Job(Base):\n    __tablename__ = 'jobs'\n    id: Mapped[_id]\n    title: Mapped[str]\n    description: Mapped[str]\n    company_id: Mapped[int] = sqlalchemy.Column(sqlalchemy.Integer, sqlalchemy.ForeignKey('companies.id'))\n    company: Mapped['Company'] = relationship('Company', back_populates='jobs')\nclass Worker(Base):",
        "detail": "project2.models",
        "documentation": {}
    },
    {
        "label": "_id",
        "kind": 5,
        "importPath": "project2.models",
        "description": "project2.models",
        "peekOfCode": "_id = Annotated[int, sqlalchemy.Column(sqlalchemy.Integer, primary_key=True)]\nclass Job(Base):\n    __tablename__ = 'jobs'\n    id: Mapped[_id]\n    title: Mapped[str]\n    description: Mapped[str]\n    company_id: Mapped[int] = sqlalchemy.Column(sqlalchemy.Integer, sqlalchemy.ForeignKey('companies.id'))\n    company: Mapped['Company'] = relationship('Company', back_populates='jobs')\nclass Worker(Base):\n    __tablename__ = 'workers'",
        "detail": "project2.models",
        "documentation": {}
    },
    {
        "label": "AbcRepository",
        "kind": 6,
        "importPath": "project2.repository",
        "description": "project2.repository",
        "peekOfCode": "class AbcRepository:\n    @abstractmethod\n    def __init__(self, session: Session):\n        pass\n    @abstractmethod\n    def get_by_id(self, id: int) -> ReturnType:\n        raise NotImplementedError()\nclass WorkerRepository(AbcRepository):\n    def __init__(self, session: Session):\n        self._session = session",
        "detail": "project2.repository",
        "documentation": {}
    },
    {
        "label": "WorkerRepository",
        "kind": 6,
        "importPath": "project2.repository",
        "description": "project2.repository",
        "peekOfCode": "class WorkerRepository(AbcRepository):\n    def __init__(self, session: Session):\n        self._session = session\n    def get_by_id(self, id: int) -> Worker:\n        db_worker = self._session.get(db.Worker, id)\n        return Worker.model_validate(db_worker)\nclass CompanyRepository(AbcRepository):\n    def __init__(self, session: Session):\n        self.session = session\n    def get_by_id(self, id: int) -> Company:",
        "detail": "project2.repository",
        "documentation": {}
    },
    {
        "label": "CompanyRepository",
        "kind": 6,
        "importPath": "project2.repository",
        "description": "project2.repository",
        "peekOfCode": "class CompanyRepository(AbcRepository):\n    def __init__(self, session: Session):\n        self.session = session\n    def get_by_id(self, id: int) -> Company:\n        db_company = self.session.get(db.Company, id)\n        return Company.model_validate(db_company)",
        "detail": "project2.repository",
        "documentation": {}
    },
    {
        "label": "get_movies",
        "kind": 2,
        "importPath": "test.main",
        "description": "test.main",
        "peekOfCode": "def get_movies() -> list:\n    return movies\n# class FootballTeam(BaseModel):\n#     title: str\n#     country: str\n# class FootballSubLayer:\n#     def __init__(self, log_message: str):\n#         self.log_message = log_message\n#     def add_team(self, football_team: FootballTeam):\n#         print(self.log_message)",
        "detail": "test.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "test.main",
        "description": "test.main",
        "peekOfCode": "app = FastAPI()\nmovies = [\n    'Oppenheimer',\n    'Inception',\n    'Kung fu panda',\n]\n@app.get('/movies')\ndef get_movies() -> list:\n    return movies\n# class FootballTeam(BaseModel):",
        "detail": "test.main",
        "documentation": {}
    },
    {
        "label": "movies",
        "kind": 5,
        "importPath": "test.main",
        "description": "test.main",
        "peekOfCode": "movies = [\n    'Oppenheimer',\n    'Inception',\n    'Kung fu panda',\n]\n@app.get('/movies')\ndef get_movies() -> list:\n    return movies\n# class FootballTeam(BaseModel):\n#     title: str",
        "detail": "test.main",
        "documentation": {}
    },
    {
        "label": "Genre",
        "kind": 6,
        "importPath": "test.models",
        "description": "test.models",
        "peekOfCode": "class Genre(Base):\n    pass\nclass Director(Base):\n    pass",
        "detail": "test.models",
        "documentation": {}
    },
    {
        "label": "Director",
        "kind": 6,
        "importPath": "test.models",
        "description": "test.models",
        "peekOfCode": "class Director(Base):\n    pass",
        "detail": "test.models",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 6,
        "importPath": "test.schemas",
        "description": "test.schemas",
        "peekOfCode": "class Base(BaseModel):\n    id: int\n    name: str\nclass Director(Base):\n    pass\nclass Genre(Base):\n    pass\nclass Movie(BaseModel):\n    description: str\n    rating: float",
        "detail": "test.schemas",
        "documentation": {}
    },
    {
        "label": "Director",
        "kind": 6,
        "importPath": "test.schemas",
        "description": "test.schemas",
        "peekOfCode": "class Director(Base):\n    pass\nclass Genre(Base):\n    pass\nclass Movie(BaseModel):\n    description: str\n    rating: float\n    duration: int\n    director: Director\n    genre: Genre",
        "detail": "test.schemas",
        "documentation": {}
    },
    {
        "label": "Genre",
        "kind": 6,
        "importPath": "test.schemas",
        "description": "test.schemas",
        "peekOfCode": "class Genre(Base):\n    pass\nclass Movie(BaseModel):\n    description: str\n    rating: float\n    duration: int\n    director: Director\n    genre: Genre",
        "detail": "test.schemas",
        "documentation": {}
    },
    {
        "label": "Movie",
        "kind": 6,
        "importPath": "test.schemas",
        "description": "test.schemas",
        "peekOfCode": "class Movie(BaseModel):\n    description: str\n    rating: float\n    duration: int\n    director: Director\n    genre: Genre",
        "detail": "test.schemas",
        "documentation": {}
    },
    {
        "label": "Teacher",
        "kind": 6,
        "importPath": "yers.database",
        "description": "yers.database",
        "peekOfCode": "class Teacher(Base):\n    __tablename__ = 'teachers'\n    id: Mapped[int] = mapped_column(sa.INT, primary_key=True)\n    name: Mapped[str]\n    yea: Mapped[int]\nclass Student(Base):\n    __tablename__ = 'students'\n    id: Mapped[int] = mapped_column(sa.INT, primary_key=True)\n    name: Mapped[str]\n    age: Mapped[int]",
        "detail": "yers.database",
        "documentation": {}
    },
    {
        "label": "Student",
        "kind": 6,
        "importPath": "yers.database",
        "description": "yers.database",
        "peekOfCode": "class Student(Base):\n    __tablename__ = 'students'\n    id: Mapped[int] = mapped_column(sa.INT, primary_key=True)\n    name: Mapped[str]\n    age: Mapped[int]",
        "detail": "yers.database",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": "yers.database",
        "description": "yers.database",
        "peekOfCode": "url = \"postgresql://postgres:postgres@localhost/postgres\"\nengine = create_engine(url)\nsession = Session(engine)\nBase = declarative_base()\nclass Teacher(Base):\n    __tablename__ = 'teachers'\n    id: Mapped[int] = mapped_column(sa.INT, primary_key=True)\n    name: Mapped[str]\n    yea: Mapped[int]\nclass Student(Base):",
        "detail": "yers.database",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "yers.database",
        "description": "yers.database",
        "peekOfCode": "engine = create_engine(url)\nsession = Session(engine)\nBase = declarative_base()\nclass Teacher(Base):\n    __tablename__ = 'teachers'\n    id: Mapped[int] = mapped_column(sa.INT, primary_key=True)\n    name: Mapped[str]\n    yea: Mapped[int]\nclass Student(Base):\n    __tablename__ = 'students'",
        "detail": "yers.database",
        "documentation": {}
    },
    {
        "label": "session",
        "kind": 5,
        "importPath": "yers.database",
        "description": "yers.database",
        "peekOfCode": "session = Session(engine)\nBase = declarative_base()\nclass Teacher(Base):\n    __tablename__ = 'teachers'\n    id: Mapped[int] = mapped_column(sa.INT, primary_key=True)\n    name: Mapped[str]\n    yea: Mapped[int]\nclass Student(Base):\n    __tablename__ = 'students'\n    id: Mapped[int] = mapped_column(sa.INT, primary_key=True)",
        "detail": "yers.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "yers.database",
        "description": "yers.database",
        "peekOfCode": "Base = declarative_base()\nclass Teacher(Base):\n    __tablename__ = 'teachers'\n    id: Mapped[int] = mapped_column(sa.INT, primary_key=True)\n    name: Mapped[str]\n    yea: Mapped[int]\nclass Student(Base):\n    __tablename__ = 'students'\n    id: Mapped[int] = mapped_column(sa.INT, primary_key=True)\n    name: Mapped[str]",
        "detail": "yers.database",
        "documentation": {}
    },
    {
        "label": "Teacher",
        "kind": 6,
        "importPath": "yers.main",
        "description": "yers.main",
        "peekOfCode": "class Teacher(BaseModel):\n    id: int\n    name: str\n    yoe: int\n    class Config:\n        from_attributes = True\nclass Student(BaseModel):\n    id: int\n    name: str\n    age: int",
        "detail": "yers.main",
        "documentation": {}
    },
    {
        "label": "Student",
        "kind": 6,
        "importPath": "yers.main",
        "description": "yers.main",
        "peekOfCode": "class Student(BaseModel):\n    id: int\n    name: str\n    age: int\n    class Config:\n        from_attributes = True\ndef get_session():\n    session = db.session\n    yield session\n    session.commit()",
        "detail": "yers.main",
        "documentation": {}
    },
    {
        "label": "get_session",
        "kind": 2,
        "importPath": "yers.main",
        "description": "yers.main",
        "peekOfCode": "def get_session():\n    session = db.session\n    yield session\n    session.commit()\n    session.close()\n@app.post('/student')\ndef student(student: Student, session: db.Session = Depends(get_session)):\n    session.add(db.Student(**student.model_dump()))\n    return f\"{student.name} was added\"\n@app.get('/student')",
        "detail": "yers.main",
        "documentation": {}
    },
    {
        "label": "student",
        "kind": 2,
        "importPath": "yers.main",
        "description": "yers.main",
        "peekOfCode": "def student(student: Student, session: db.Session = Depends(get_session)):\n    session.add(db.Student(**student.model_dump()))\n    return f\"{student.name} was added\"\n@app.get('/student')\ndef student() -> list[Student]:\n    db_students = db.session.execute(select(db.Student)).scalars().all()\n    students = []\n    for db_student in db_students:\n        students.append(Student.model_validate(db_student)) \n    return students",
        "detail": "yers.main",
        "documentation": {}
    },
    {
        "label": "student",
        "kind": 2,
        "importPath": "yers.main",
        "description": "yers.main",
        "peekOfCode": "def student() -> list[Student]:\n    db_students = db.session.execute(select(db.Student)).scalars().all()\n    students = []\n    for db_student in db_students:\n        students.append(Student.model_validate(db_student)) \n    return students",
        "detail": "yers.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "yers.main",
        "description": "yers.main",
        "peekOfCode": "app = FastAPI()\nclass Teacher(BaseModel):\n    id: int\n    name: str\n    yoe: int\n    class Config:\n        from_attributes = True\nclass Student(BaseModel):\n    id: int\n    name: str",
        "detail": "yers.main",
        "documentation": {}
    },
    {
        "label": "print_hi",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def print_hi(name):\n    # Use a breakpoint in the code line below to debug your script.\n    print(f'Hi, {name}')  # Press ⌘F8 to toggle the breakpoint.\n# Press the green button in the gutter to run the script.\nif __name__ == '__main__':\n    print_hi('PyCharm')\n# See PyCharm help at https://www.jetbrains.com/help/pycharm/",
        "detail": "main",
        "documentation": {}
    }
]